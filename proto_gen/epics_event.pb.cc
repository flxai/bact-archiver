// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: epics_event.proto

#include "epics_event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_epics_5fevent_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_epics_5fevent_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FieldValue;
}  // namespace protobuf_epics_5fevent_2eproto
namespace EPICS {
class FieldValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FieldValue>
      _instance;
} _FieldValue_default_instance_;
class ScalarStringDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ScalarString>
      _instance;
} _ScalarString_default_instance_;
class ScalarByteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ScalarByte>
      _instance;
} _ScalarByte_default_instance_;
class ScalarShortDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ScalarShort>
      _instance;
} _ScalarShort_default_instance_;
class ScalarIntDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ScalarInt>
      _instance;
} _ScalarInt_default_instance_;
class ScalarEnumDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ScalarEnum>
      _instance;
} _ScalarEnum_default_instance_;
class ScalarFloatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ScalarFloat>
      _instance;
} _ScalarFloat_default_instance_;
class ScalarDoubleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ScalarDouble>
      _instance;
} _ScalarDouble_default_instance_;
class VectorStringDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VectorString>
      _instance;
} _VectorString_default_instance_;
class VectorCharDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VectorChar>
      _instance;
} _VectorChar_default_instance_;
class VectorShortDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VectorShort>
      _instance;
} _VectorShort_default_instance_;
class VectorIntDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VectorInt>
      _instance;
} _VectorInt_default_instance_;
class VectorEnumDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VectorEnum>
      _instance;
} _VectorEnum_default_instance_;
class VectorFloatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VectorFloat>
      _instance;
} _VectorFloat_default_instance_;
class VectorDoubleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VectorDouble>
      _instance;
} _VectorDouble_default_instance_;
class V4GenericBytesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<V4GenericBytes>
      _instance;
} _V4GenericBytes_default_instance_;
class PayloadInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PayloadInfo>
      _instance;
} _PayloadInfo_default_instance_;
}  // namespace EPICS
namespace protobuf_epics_5fevent_2eproto {
static void InitDefaultsFieldValue() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::EPICS::_FieldValue_default_instance_;
    new (ptr) ::EPICS::FieldValue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EPICS::FieldValue::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FieldValue =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFieldValue}, {}};

static void InitDefaultsScalarString() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::EPICS::_ScalarString_default_instance_;
    new (ptr) ::EPICS::ScalarString();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EPICS::ScalarString::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ScalarString =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsScalarString}, {
      &protobuf_epics_5fevent_2eproto::scc_info_FieldValue.base,}};

static void InitDefaultsScalarByte() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::EPICS::_ScalarByte_default_instance_;
    new (ptr) ::EPICS::ScalarByte();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EPICS::ScalarByte::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ScalarByte =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsScalarByte}, {
      &protobuf_epics_5fevent_2eproto::scc_info_FieldValue.base,}};

static void InitDefaultsScalarShort() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::EPICS::_ScalarShort_default_instance_;
    new (ptr) ::EPICS::ScalarShort();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EPICS::ScalarShort::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ScalarShort =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsScalarShort}, {
      &protobuf_epics_5fevent_2eproto::scc_info_FieldValue.base,}};

static void InitDefaultsScalarInt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::EPICS::_ScalarInt_default_instance_;
    new (ptr) ::EPICS::ScalarInt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EPICS::ScalarInt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ScalarInt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsScalarInt}, {
      &protobuf_epics_5fevent_2eproto::scc_info_FieldValue.base,}};

static void InitDefaultsScalarEnum() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::EPICS::_ScalarEnum_default_instance_;
    new (ptr) ::EPICS::ScalarEnum();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EPICS::ScalarEnum::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ScalarEnum =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsScalarEnum}, {
      &protobuf_epics_5fevent_2eproto::scc_info_FieldValue.base,}};

static void InitDefaultsScalarFloat() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::EPICS::_ScalarFloat_default_instance_;
    new (ptr) ::EPICS::ScalarFloat();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EPICS::ScalarFloat::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ScalarFloat =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsScalarFloat}, {
      &protobuf_epics_5fevent_2eproto::scc_info_FieldValue.base,}};

static void InitDefaultsScalarDouble() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::EPICS::_ScalarDouble_default_instance_;
    new (ptr) ::EPICS::ScalarDouble();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EPICS::ScalarDouble::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ScalarDouble =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsScalarDouble}, {
      &protobuf_epics_5fevent_2eproto::scc_info_FieldValue.base,}};

static void InitDefaultsVectorString() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::EPICS::_VectorString_default_instance_;
    new (ptr) ::EPICS::VectorString();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EPICS::VectorString::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_VectorString =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsVectorString}, {
      &protobuf_epics_5fevent_2eproto::scc_info_FieldValue.base,}};

static void InitDefaultsVectorChar() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::EPICS::_VectorChar_default_instance_;
    new (ptr) ::EPICS::VectorChar();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EPICS::VectorChar::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_VectorChar =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsVectorChar}, {
      &protobuf_epics_5fevent_2eproto::scc_info_FieldValue.base,}};

static void InitDefaultsVectorShort() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::EPICS::_VectorShort_default_instance_;
    new (ptr) ::EPICS::VectorShort();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EPICS::VectorShort::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_VectorShort =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsVectorShort}, {
      &protobuf_epics_5fevent_2eproto::scc_info_FieldValue.base,}};

static void InitDefaultsVectorInt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::EPICS::_VectorInt_default_instance_;
    new (ptr) ::EPICS::VectorInt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EPICS::VectorInt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_VectorInt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsVectorInt}, {
      &protobuf_epics_5fevent_2eproto::scc_info_FieldValue.base,}};

static void InitDefaultsVectorEnum() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::EPICS::_VectorEnum_default_instance_;
    new (ptr) ::EPICS::VectorEnum();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EPICS::VectorEnum::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_VectorEnum =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsVectorEnum}, {
      &protobuf_epics_5fevent_2eproto::scc_info_FieldValue.base,}};

static void InitDefaultsVectorFloat() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::EPICS::_VectorFloat_default_instance_;
    new (ptr) ::EPICS::VectorFloat();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EPICS::VectorFloat::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_VectorFloat =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsVectorFloat}, {
      &protobuf_epics_5fevent_2eproto::scc_info_FieldValue.base,}};

static void InitDefaultsVectorDouble() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::EPICS::_VectorDouble_default_instance_;
    new (ptr) ::EPICS::VectorDouble();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EPICS::VectorDouble::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_VectorDouble =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsVectorDouble}, {
      &protobuf_epics_5fevent_2eproto::scc_info_FieldValue.base,}};

static void InitDefaultsV4GenericBytes() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::EPICS::_V4GenericBytes_default_instance_;
    new (ptr) ::EPICS::V4GenericBytes();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EPICS::V4GenericBytes::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_V4GenericBytes =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsV4GenericBytes}, {
      &protobuf_epics_5fevent_2eproto::scc_info_FieldValue.base,}};

static void InitDefaultsPayloadInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::EPICS::_PayloadInfo_default_instance_;
    new (ptr) ::EPICS::PayloadInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EPICS::PayloadInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PayloadInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPayloadInfo}, {
      &protobuf_epics_5fevent_2eproto::scc_info_FieldValue.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_FieldValue.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ScalarString.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ScalarByte.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ScalarShort.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ScalarInt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ScalarEnum.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ScalarFloat.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ScalarDouble.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VectorString.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VectorChar.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VectorShort.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VectorInt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VectorEnum.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VectorFloat.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VectorDouble.base);
  ::google::protobuf::internal::InitSCC(&scc_info_V4GenericBytes.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PayloadInfo.base);
}

::google::protobuf::Metadata file_level_metadata[17];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::FieldValue, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::FieldValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::FieldValue, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::FieldValue, val_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarString, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarString, secondsintoyear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarString, nano_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarString, val_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarString, severity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarString, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarString, repeatcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarString, fieldvalues_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarString, fieldactualchange_),
  1,
  2,
  0,
  3,
  4,
  5,
  ~0u,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarByte, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarByte, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarByte, secondsintoyear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarByte, nano_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarByte, val_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarByte, severity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarByte, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarByte, repeatcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarByte, fieldvalues_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarByte, fieldactualchange_),
  1,
  2,
  0,
  3,
  4,
  5,
  ~0u,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarShort, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarShort, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarShort, secondsintoyear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarShort, nano_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarShort, val_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarShort, severity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarShort, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarShort, repeatcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarShort, fieldvalues_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarShort, fieldactualchange_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarInt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarInt, secondsintoyear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarInt, nano_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarInt, val_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarInt, severity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarInt, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarInt, repeatcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarInt, fieldvalues_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarInt, fieldactualchange_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarEnum, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarEnum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarEnum, secondsintoyear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarEnum, nano_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarEnum, val_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarEnum, severity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarEnum, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarEnum, repeatcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarEnum, fieldvalues_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarEnum, fieldactualchange_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarFloat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarFloat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarFloat, secondsintoyear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarFloat, nano_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarFloat, val_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarFloat, severity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarFloat, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarFloat, repeatcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarFloat, fieldvalues_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarFloat, fieldactualchange_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarDouble, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarDouble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarDouble, secondsintoyear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarDouble, nano_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarDouble, val_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarDouble, severity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarDouble, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarDouble, repeatcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarDouble, fieldvalues_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::ScalarDouble, fieldactualchange_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorString, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorString, secondsintoyear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorString, nano_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorString, val_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorString, severity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorString, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorString, repeatcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorString, fieldvalues_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorString, fieldactualchange_),
  0,
  1,
  ~0u,
  2,
  3,
  4,
  ~0u,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorChar, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorChar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorChar, secondsintoyear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorChar, nano_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorChar, val_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorChar, severity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorChar, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorChar, repeatcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorChar, fieldvalues_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorChar, fieldactualchange_),
  1,
  2,
  0,
  3,
  4,
  5,
  ~0u,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorShort, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorShort, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorShort, secondsintoyear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorShort, nano_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorShort, val_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorShort, severity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorShort, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorShort, repeatcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorShort, fieldvalues_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorShort, fieldactualchange_),
  0,
  1,
  ~0u,
  2,
  3,
  4,
  ~0u,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorInt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorInt, secondsintoyear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorInt, nano_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorInt, val_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorInt, severity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorInt, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorInt, repeatcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorInt, fieldvalues_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorInt, fieldactualchange_),
  0,
  1,
  ~0u,
  2,
  3,
  4,
  ~0u,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorEnum, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorEnum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorEnum, secondsintoyear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorEnum, nano_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorEnum, val_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorEnum, severity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorEnum, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorEnum, repeatcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorEnum, fieldvalues_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorEnum, fieldactualchange_),
  0,
  1,
  ~0u,
  2,
  3,
  4,
  ~0u,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorFloat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorFloat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorFloat, secondsintoyear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorFloat, nano_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorFloat, val_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorFloat, severity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorFloat, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorFloat, repeatcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorFloat, fieldvalues_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorFloat, fieldactualchange_),
  0,
  1,
  ~0u,
  2,
  3,
  4,
  ~0u,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorDouble, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorDouble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorDouble, secondsintoyear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorDouble, nano_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorDouble, val_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorDouble, severity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorDouble, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorDouble, repeatcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorDouble, fieldvalues_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::VectorDouble, fieldactualchange_),
  0,
  1,
  ~0u,
  2,
  3,
  4,
  ~0u,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::V4GenericBytes, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::V4GenericBytes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::V4GenericBytes, secondsintoyear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::V4GenericBytes, nano_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::V4GenericBytes, val_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::V4GenericBytes, severity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::V4GenericBytes, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::V4GenericBytes, repeatcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::V4GenericBytes, fieldvalues_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::V4GenericBytes, fieldactualchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::V4GenericBytes, usertag_),
  1,
  2,
  0,
  3,
  4,
  5,
  ~0u,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::PayloadInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::PayloadInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::PayloadInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::PayloadInfo, pvname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::PayloadInfo, year_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::PayloadInfo, elementcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::PayloadInfo, unused00_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::PayloadInfo, unused01_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::PayloadInfo, unused02_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::PayloadInfo, unused03_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::PayloadInfo, unused04_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::PayloadInfo, unused05_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::PayloadInfo, unused06_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::PayloadInfo, unused07_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::PayloadInfo, unused08_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::PayloadInfo, unused09_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EPICS::PayloadInfo, headers_),
  2,
  0,
  3,
  13,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  1,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::EPICS::FieldValue)},
  { 9, 22, sizeof(::EPICS::ScalarString)},
  { 30, 43, sizeof(::EPICS::ScalarByte)},
  { 51, 64, sizeof(::EPICS::ScalarShort)},
  { 72, 85, sizeof(::EPICS::ScalarInt)},
  { 93, 106, sizeof(::EPICS::ScalarEnum)},
  { 114, 127, sizeof(::EPICS::ScalarFloat)},
  { 135, 148, sizeof(::EPICS::ScalarDouble)},
  { 156, 169, sizeof(::EPICS::VectorString)},
  { 177, 190, sizeof(::EPICS::VectorChar)},
  { 198, 211, sizeof(::EPICS::VectorShort)},
  { 219, 232, sizeof(::EPICS::VectorInt)},
  { 240, 253, sizeof(::EPICS::VectorEnum)},
  { 261, 274, sizeof(::EPICS::VectorFloat)},
  { 282, 295, sizeof(::EPICS::VectorDouble)},
  { 303, 317, sizeof(::EPICS::V4GenericBytes)},
  { 326, 346, sizeof(::EPICS::PayloadInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::EPICS::_FieldValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::EPICS::_ScalarString_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::EPICS::_ScalarByte_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::EPICS::_ScalarShort_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::EPICS::_ScalarInt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::EPICS::_ScalarEnum_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::EPICS::_ScalarFloat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::EPICS::_ScalarDouble_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::EPICS::_VectorString_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::EPICS::_VectorChar_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::EPICS::_VectorShort_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::EPICS::_VectorInt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::EPICS::_VectorEnum_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::EPICS::_VectorFloat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::EPICS::_VectorDouble_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::EPICS::_V4GenericBytes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::EPICS::_PayloadInfo_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "epics_event.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 17);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021epics_event.proto\022\005EPICS\"\'\n\nFieldValue"
      "\022\014\n\004name\030\001 \002(\t\022\013\n\003val\030\002 \002(\t\"\302\001\n\014ScalarSt"
      "ring\022\027\n\017secondsintoyear\030\001 \002(\r\022\014\n\004nano\030\002 "
      "\002(\r\022\013\n\003val\030\003 \002(\t\022\023\n\010severity\030\004 \001(\005:\0010\022\021\n"
      "\006status\030\005 \001(\005:\0010\022\023\n\013repeatcount\030\006 \001(\r\022&\n"
      "\013fieldvalues\030\007 \003(\0132\021.EPICS.FieldValue\022\031\n"
      "\021fieldactualchange\030\010 \001(\010\"\300\001\n\nScalarByte\022"
      "\027\n\017secondsintoyear\030\001 \002(\r\022\014\n\004nano\030\002 \002(\r\022\013"
      "\n\003val\030\003 \002(\014\022\023\n\010severity\030\004 \001(\005:\0010\022\021\n\006stat"
      "us\030\005 \001(\005:\0010\022\023\n\013repeatcount\030\006 \001(\r\022&\n\013fiel"
      "dvalues\030\007 \003(\0132\021.EPICS.FieldValue\022\031\n\021fiel"
      "dactualchange\030\010 \001(\010\"\301\001\n\013ScalarShort\022\027\n\017s"
      "econdsintoyear\030\001 \002(\r\022\014\n\004nano\030\002 \002(\r\022\013\n\003va"
      "l\030\003 \002(\021\022\023\n\010severity\030\004 \001(\005:\0010\022\021\n\006status\030\005"
      " \001(\005:\0010\022\023\n\013repeatcount\030\006 \001(\r\022&\n\013fieldval"
      "ues\030\007 \003(\0132\021.EPICS.FieldValue\022\031\n\021fieldact"
      "ualchange\030\010 \001(\010\"\277\001\n\tScalarInt\022\027\n\017seconds"
      "intoyear\030\001 \002(\r\022\014\n\004nano\030\002 \002(\r\022\013\n\003val\030\003 \002("
      "\017\022\023\n\010severity\030\004 \001(\005:\0010\022\021\n\006status\030\005 \001(\005:\001"
      "0\022\023\n\013repeatcount\030\006 \001(\r\022&\n\013fieldvalues\030\007 "
      "\003(\0132\021.EPICS.FieldValue\022\031\n\021fieldactualcha"
      "nge\030\010 \001(\010\"\300\001\n\nScalarEnum\022\027\n\017secondsintoy"
      "ear\030\001 \002(\r\022\014\n\004nano\030\002 \002(\r\022\013\n\003val\030\003 \002(\021\022\023\n\010"
      "severity\030\004 \001(\005:\0010\022\021\n\006status\030\005 \001(\005:\0010\022\023\n\013"
      "repeatcount\030\006 \001(\r\022&\n\013fieldvalues\030\007 \003(\0132\021"
      ".EPICS.FieldValue\022\031\n\021fieldactualchange\030\010"
      " \001(\010\"\301\001\n\013ScalarFloat\022\027\n\017secondsintoyear\030"
      "\001 \002(\r\022\014\n\004nano\030\002 \002(\r\022\013\n\003val\030\003 \002(\002\022\023\n\010seve"
      "rity\030\004 \001(\005:\0010\022\021\n\006status\030\005 \001(\005:\0010\022\023\n\013repe"
      "atcount\030\006 \001(\r\022&\n\013fieldvalues\030\007 \003(\0132\021.EPI"
      "CS.FieldValue\022\031\n\021fieldactualchange\030\010 \001(\010"
      "\"\302\001\n\014ScalarDouble\022\027\n\017secondsintoyear\030\001 \002"
      "(\r\022\014\n\004nano\030\002 \002(\r\022\013\n\003val\030\003 \002(\001\022\023\n\010severit"
      "y\030\004 \001(\005:\0010\022\021\n\006status\030\005 \001(\005:\0010\022\023\n\013repeatc"
      "ount\030\006 \001(\r\022&\n\013fieldvalues\030\007 \003(\0132\021.EPICS."
      "FieldValue\022\031\n\021fieldactualchange\030\010 \001(\010\"\302\001"
      "\n\014VectorString\022\027\n\017secondsintoyear\030\001 \002(\r\022"
      "\014\n\004nano\030\002 \002(\r\022\013\n\003val\030\003 \003(\t\022\023\n\010severity\030\004"
      " \001(\005:\0010\022\021\n\006status\030\005 \001(\005:\0010\022\023\n\013repeatcoun"
      "t\030\006 \001(\r\022&\n\013fieldvalues\030\007 \003(\0132\021.EPICS.Fie"
      "ldValue\022\031\n\021fieldactualchange\030\010 \001(\010\"\300\001\n\nV"
      "ectorChar\022\027\n\017secondsintoyear\030\001 \002(\r\022\014\n\004na"
      "no\030\002 \002(\r\022\013\n\003val\030\003 \002(\014\022\023\n\010severity\030\004 \001(\005:"
      "\0010\022\021\n\006status\030\005 \001(\005:\0010\022\023\n\013repeatcount\030\006 \001"
      "(\r\022&\n\013fieldvalues\030\007 \003(\0132\021.EPICS.FieldVal"
      "ue\022\031\n\021fieldactualchange\030\010 \001(\010\"\305\001\n\013Vector"
      "Short\022\027\n\017secondsintoyear\030\001 \002(\r\022\014\n\004nano\030\002"
      " \002(\r\022\017\n\003val\030\003 \003(\021B\002\020\001\022\023\n\010severity\030\004 \001(\005:"
      "\0010\022\021\n\006status\030\005 \001(\005:\0010\022\023\n\013repeatcount\030\006 \001"
      "(\r\022&\n\013fieldvalues\030\007 \003(\0132\021.EPICS.FieldVal"
      "ue\022\031\n\021fieldactualchange\030\010 \001(\010\"\303\001\n\tVector"
      "Int\022\027\n\017secondsintoyear\030\001 \002(\r\022\014\n\004nano\030\002 \002"
      "(\r\022\017\n\003val\030\003 \003(\017B\002\020\001\022\023\n\010severity\030\004 \001(\005:\0010"
      "\022\021\n\006status\030\005 \001(\005:\0010\022\023\n\013repeatcount\030\006 \001(\r"
      "\022&\n\013fieldvalues\030\007 \003(\0132\021.EPICS.FieldValue"
      "\022\031\n\021fieldactualchange\030\010 \001(\010\"\304\001\n\nVectorEn"
      "um\022\027\n\017secondsintoyear\030\001 \002(\r\022\014\n\004nano\030\002 \002("
      "\r\022\017\n\003val\030\003 \003(\021B\002\020\001\022\023\n\010severity\030\004 \001(\005:\0010\022"
      "\021\n\006status\030\005 \001(\005:\0010\022\023\n\013repeatcount\030\006 \001(\r\022"
      "&\n\013fieldvalues\030\007 \003(\0132\021.EPICS.FieldValue\022"
      "\031\n\021fieldactualchange\030\010 \001(\010\"\305\001\n\013VectorFlo"
      "at\022\027\n\017secondsintoyear\030\001 \002(\r\022\014\n\004nano\030\002 \002("
      "\r\022\017\n\003val\030\003 \003(\002B\002\020\001\022\023\n\010severity\030\004 \001(\005:\0010\022"
      "\021\n\006status\030\005 \001(\005:\0010\022\023\n\013repeatcount\030\006 \001(\r\022"
      "&\n\013fieldvalues\030\007 \003(\0132\021.EPICS.FieldValue\022"
      "\031\n\021fieldactualchange\030\010 \001(\010\"\306\001\n\014VectorDou"
      "ble\022\027\n\017secondsintoyear\030\001 \002(\r\022\014\n\004nano\030\002 \002"
      "(\r\022\017\n\003val\030\003 \003(\001B\002\020\001\022\023\n\010severity\030\004 \001(\005:\0010"
      "\022\021\n\006status\030\005 \001(\005:\0010\022\023\n\013repeatcount\030\006 \001(\r"
      "\022&\n\013fieldvalues\030\007 \003(\0132\021.EPICS.FieldValue"
      "\022\031\n\021fieldactualchange\030\010 \001(\010\"\325\001\n\016V4Generi"
      "cBytes\022\027\n\017secondsintoyear\030\001 \002(\r\022\014\n\004nano\030"
      "\002 \002(\r\022\013\n\003val\030\003 \002(\014\022\023\n\010severity\030\004 \001(\005:\0010\022"
      "\021\n\006status\030\005 \001(\005:\0010\022\023\n\013repeatcount\030\006 \001(\r\022"
      "&\n\013fieldvalues\030\007 \003(\0132\021.EPICS.FieldValue\022"
      "\031\n\021fieldactualchange\030\010 \001(\010\022\017\n\007userTag\030\t "
      "\001(\r\"\273\002\n\013PayloadInfo\022 \n\004type\030\001 \002(\0162\022.EPIC"
      "S.PayloadType\022\016\n\006pvname\030\002 \002(\t\022\014\n\004year\030\003 "
      "\002(\005\022\024\n\014elementCount\030\004 \001(\005\022\020\n\010unused00\030\005 "
      "\001(\001\022\020\n\010unused01\030\006 \001(\001\022\020\n\010unused02\030\007 \001(\001\022"
      "\020\n\010unused03\030\010 \001(\001\022\020\n\010unused04\030\t \001(\001\022\020\n\010u"
      "nused05\030\n \001(\001\022\020\n\010unused06\030\013 \001(\001\022\020\n\010unuse"
      "d07\030\014 \001(\001\022\020\n\010unused08\030\r \001(\001\022\020\n\010unused09\030"
      "\016 \001(\t\022\"\n\007headers\030\017 \003(\0132\021.EPICS.FieldValu"
      "e*\251\002\n\013PayloadType\022\021\n\rSCALAR_STRING\020\000\022\020\n\014"
      "SCALAR_SHORT\020\001\022\020\n\014SCALAR_FLOAT\020\002\022\017\n\013SCAL"
      "AR_ENUM\020\003\022\017\n\013SCALAR_BYTE\020\004\022\016\n\nSCALAR_INT"
      "\020\005\022\021\n\rSCALAR_DOUBLE\020\006\022\023\n\017WAVEFORM_STRING"
      "\020\007\022\022\n\016WAVEFORM_SHORT\020\010\022\022\n\016WAVEFORM_FLOAT"
      "\020\t\022\021\n\rWAVEFORM_ENUM\020\n\022\021\n\rWAVEFORM_BYTE\020\013"
      "\022\020\n\014WAVEFORM_INT\020\014\022\023\n\017WAVEFORM_DOUBLE\020\r\022"
      "\024\n\020V4_GENERIC_BYTES\020\016B4\n&edu.stanford.sl"
      "ac.archiverappliance.PBB\nEPICSEvent"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3715);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "epics_event.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_epics_5fevent_2eproto
namespace EPICS {
const ::google::protobuf::EnumDescriptor* PayloadType_descriptor() {
  protobuf_epics_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_epics_5fevent_2eproto::file_level_enum_descriptors[0];
}
bool PayloadType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void FieldValue::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FieldValue::kNameFieldNumber;
const int FieldValue::kValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FieldValue::FieldValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_epics_5fevent_2eproto::scc_info_FieldValue.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:EPICS.FieldValue)
}
FieldValue::FieldValue(const FieldValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  val_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_val()) {
    val_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.val_);
  }
  // @@protoc_insertion_point(copy_constructor:EPICS.FieldValue)
}

void FieldValue::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  val_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FieldValue::~FieldValue() {
  // @@protoc_insertion_point(destructor:EPICS.FieldValue)
  SharedDtor();
}

void FieldValue::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  val_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FieldValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FieldValue::descriptor() {
  ::protobuf_epics_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_epics_5fevent_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FieldValue& FieldValue::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_epics_5fevent_2eproto::scc_info_FieldValue.base);
  return *internal_default_instance();
}


void FieldValue::Clear() {
// @@protoc_insertion_point(message_clear_start:EPICS.FieldValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      val_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FieldValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EPICS.FieldValue)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "EPICS.FieldValue.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string val = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_val()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->val().data(), static_cast<int>(this->val().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "EPICS.FieldValue.val");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EPICS.FieldValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EPICS.FieldValue)
  return false;
#undef DO_
}

void FieldValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EPICS.FieldValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "EPICS.FieldValue.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string val = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->val().data(), static_cast<int>(this->val().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "EPICS.FieldValue.val");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->val(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EPICS.FieldValue)
}

::google::protobuf::uint8* FieldValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:EPICS.FieldValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "EPICS.FieldValue.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string val = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->val().data(), static_cast<int>(this->val().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "EPICS.FieldValue.val");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->val(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EPICS.FieldValue)
  return target;
}

size_t FieldValue::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EPICS.FieldValue)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_val()) {
    // required string val = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->val());
  }

  return total_size;
}
size_t FieldValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EPICS.FieldValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string val = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->val());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FieldValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EPICS.FieldValue)
  GOOGLE_DCHECK_NE(&from, this);
  const FieldValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FieldValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EPICS.FieldValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EPICS.FieldValue)
    MergeFrom(*source);
  }
}

void FieldValue::MergeFrom(const FieldValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EPICS.FieldValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_val();
      val_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.val_);
    }
  }
}

void FieldValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EPICS.FieldValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldValue::CopyFrom(const FieldValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EPICS.FieldValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void FieldValue::Swap(FieldValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FieldValue::InternalSwap(FieldValue* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  val_.Swap(&other->val_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FieldValue::GetMetadata() const {
  protobuf_epics_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_epics_5fevent_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ScalarString::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScalarString::kSecondsintoyearFieldNumber;
const int ScalarString::kNanoFieldNumber;
const int ScalarString::kValFieldNumber;
const int ScalarString::kSeverityFieldNumber;
const int ScalarString::kStatusFieldNumber;
const int ScalarString::kRepeatcountFieldNumber;
const int ScalarString::kFieldvaluesFieldNumber;
const int ScalarString::kFieldactualchangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScalarString::ScalarString()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_epics_5fevent_2eproto::scc_info_ScalarString.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:EPICS.ScalarString)
}
ScalarString::ScalarString(const ScalarString& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      fieldvalues_(from.fieldvalues_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  val_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_val()) {
    val_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.val_);
  }
  ::memcpy(&secondsintoyear_, &from.secondsintoyear_,
    static_cast<size_t>(reinterpret_cast<char*>(&fieldactualchange_) -
    reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  // @@protoc_insertion_point(copy_constructor:EPICS.ScalarString)
}

void ScalarString::SharedCtor() {
  val_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&secondsintoyear_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fieldactualchange_) -
      reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
}

ScalarString::~ScalarString() {
  // @@protoc_insertion_point(destructor:EPICS.ScalarString)
  SharedDtor();
}

void ScalarString::SharedDtor() {
  val_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ScalarString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ScalarString::descriptor() {
  ::protobuf_epics_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_epics_5fevent_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScalarString& ScalarString::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_epics_5fevent_2eproto::scc_info_ScalarString.base);
  return *internal_default_instance();
}


void ScalarString::Clear() {
// @@protoc_insertion_point(message_clear_start:EPICS.ScalarString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fieldvalues_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    val_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 126u) {
    ::memset(&secondsintoyear_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fieldactualchange_) -
        reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ScalarString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EPICS.ScalarString)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 secondsintoyear = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_secondsintoyear();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondsintoyear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 nano = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_nano();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nano_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string val = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_val()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->val().data(), static_cast<int>(this->val().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "EPICS.ScalarString.val");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 severity = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_severity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &severity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 status = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 repeatcount = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_repeatcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repeatcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .EPICS.FieldValue fieldvalues = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_fieldvalues()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fieldactualchange = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_fieldactualchange();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fieldactualchange_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EPICS.ScalarString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EPICS.ScalarString)
  return false;
#undef DO_
}

void ScalarString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EPICS.ScalarString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 secondsintoyear = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->secondsintoyear(), output);
  }

  // required uint32 nano = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nano(), output);
  }

  // required string val = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->val().data(), static_cast<int>(this->val().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "EPICS.ScalarString.val");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->val(), output);
  }

  // optional int32 severity = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->severity(), output);
  }

  // optional int32 status = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }

  // optional uint32 repeatcount = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->repeatcount(), output);
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fieldvalues_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->fieldvalues(static_cast<int>(i)),
      output);
  }

  // optional bool fieldactualchange = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->fieldactualchange(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EPICS.ScalarString)
}

::google::protobuf::uint8* ScalarString::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:EPICS.ScalarString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 secondsintoyear = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->secondsintoyear(), target);
  }

  // required uint32 nano = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nano(), target);
  }

  // required string val = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->val().data(), static_cast<int>(this->val().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "EPICS.ScalarString.val");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->val(), target);
  }

  // optional int32 severity = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->severity(), target);
  }

  // optional int32 status = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }

  // optional uint32 repeatcount = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->repeatcount(), target);
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fieldvalues_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->fieldvalues(static_cast<int>(i)), deterministic, target);
  }

  // optional bool fieldactualchange = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->fieldactualchange(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EPICS.ScalarString)
  return target;
}

size_t ScalarString::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EPICS.ScalarString)
  size_t total_size = 0;

  if (has_val()) {
    // required string val = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->val());
  }

  if (has_secondsintoyear()) {
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->secondsintoyear());
  }

  if (has_nano()) {
    // required uint32 nano = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nano());
  }

  return total_size;
}
size_t ScalarString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EPICS.ScalarString)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string val = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->val());

    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->secondsintoyear());

    // required uint32 nano = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nano());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .EPICS.FieldValue fieldvalues = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->fieldvalues_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fieldvalues(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 120u) {
    // optional int32 severity = 4 [default = 0];
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->severity());
    }

    // optional int32 status = 5 [default = 0];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional uint32 repeatcount = 6;
    if (has_repeatcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->repeatcount());
    }

    // optional bool fieldactualchange = 8;
    if (has_fieldactualchange()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarString::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EPICS.ScalarString)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarString* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScalarString>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EPICS.ScalarString)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EPICS.ScalarString)
    MergeFrom(*source);
  }
}

void ScalarString::MergeFrom(const ScalarString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EPICS.ScalarString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fieldvalues_.MergeFrom(from.fieldvalues_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_val();
      val_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.val_);
    }
    if (cached_has_bits & 0x00000002u) {
      secondsintoyear_ = from.secondsintoyear_;
    }
    if (cached_has_bits & 0x00000004u) {
      nano_ = from.nano_;
    }
    if (cached_has_bits & 0x00000008u) {
      severity_ = from.severity_;
    }
    if (cached_has_bits & 0x00000010u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000020u) {
      repeatcount_ = from.repeatcount_;
    }
    if (cached_has_bits & 0x00000040u) {
      fieldactualchange_ = from.fieldactualchange_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScalarString::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EPICS.ScalarString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarString::CopyFrom(const ScalarString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EPICS.ScalarString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarString::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->fieldvalues())) return false;
  return true;
}

void ScalarString::Swap(ScalarString* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScalarString::InternalSwap(ScalarString* other) {
  using std::swap;
  CastToBase(&fieldvalues_)->InternalSwap(CastToBase(&other->fieldvalues_));
  val_.Swap(&other->val_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(secondsintoyear_, other->secondsintoyear_);
  swap(nano_, other->nano_);
  swap(severity_, other->severity_);
  swap(status_, other->status_);
  swap(repeatcount_, other->repeatcount_);
  swap(fieldactualchange_, other->fieldactualchange_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ScalarString::GetMetadata() const {
  protobuf_epics_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_epics_5fevent_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ScalarByte::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScalarByte::kSecondsintoyearFieldNumber;
const int ScalarByte::kNanoFieldNumber;
const int ScalarByte::kValFieldNumber;
const int ScalarByte::kSeverityFieldNumber;
const int ScalarByte::kStatusFieldNumber;
const int ScalarByte::kRepeatcountFieldNumber;
const int ScalarByte::kFieldvaluesFieldNumber;
const int ScalarByte::kFieldactualchangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScalarByte::ScalarByte()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_epics_5fevent_2eproto::scc_info_ScalarByte.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:EPICS.ScalarByte)
}
ScalarByte::ScalarByte(const ScalarByte& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      fieldvalues_(from.fieldvalues_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  val_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_val()) {
    val_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.val_);
  }
  ::memcpy(&secondsintoyear_, &from.secondsintoyear_,
    static_cast<size_t>(reinterpret_cast<char*>(&fieldactualchange_) -
    reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  // @@protoc_insertion_point(copy_constructor:EPICS.ScalarByte)
}

void ScalarByte::SharedCtor() {
  val_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&secondsintoyear_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fieldactualchange_) -
      reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
}

ScalarByte::~ScalarByte() {
  // @@protoc_insertion_point(destructor:EPICS.ScalarByte)
  SharedDtor();
}

void ScalarByte::SharedDtor() {
  val_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ScalarByte::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ScalarByte::descriptor() {
  ::protobuf_epics_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_epics_5fevent_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScalarByte& ScalarByte::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_epics_5fevent_2eproto::scc_info_ScalarByte.base);
  return *internal_default_instance();
}


void ScalarByte::Clear() {
// @@protoc_insertion_point(message_clear_start:EPICS.ScalarByte)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fieldvalues_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    val_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 126u) {
    ::memset(&secondsintoyear_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fieldactualchange_) -
        reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ScalarByte::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EPICS.ScalarByte)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 secondsintoyear = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_secondsintoyear();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondsintoyear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 nano = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_nano();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nano_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes val = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_val()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 severity = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_severity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &severity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 status = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 repeatcount = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_repeatcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repeatcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .EPICS.FieldValue fieldvalues = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_fieldvalues()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fieldactualchange = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_fieldactualchange();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fieldactualchange_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EPICS.ScalarByte)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EPICS.ScalarByte)
  return false;
#undef DO_
}

void ScalarByte::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EPICS.ScalarByte)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 secondsintoyear = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->secondsintoyear(), output);
  }

  // required uint32 nano = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nano(), output);
  }

  // required bytes val = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->val(), output);
  }

  // optional int32 severity = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->severity(), output);
  }

  // optional int32 status = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }

  // optional uint32 repeatcount = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->repeatcount(), output);
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fieldvalues_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->fieldvalues(static_cast<int>(i)),
      output);
  }

  // optional bool fieldactualchange = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->fieldactualchange(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EPICS.ScalarByte)
}

::google::protobuf::uint8* ScalarByte::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:EPICS.ScalarByte)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 secondsintoyear = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->secondsintoyear(), target);
  }

  // required uint32 nano = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nano(), target);
  }

  // required bytes val = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->val(), target);
  }

  // optional int32 severity = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->severity(), target);
  }

  // optional int32 status = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }

  // optional uint32 repeatcount = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->repeatcount(), target);
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fieldvalues_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->fieldvalues(static_cast<int>(i)), deterministic, target);
  }

  // optional bool fieldactualchange = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->fieldactualchange(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EPICS.ScalarByte)
  return target;
}

size_t ScalarByte::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EPICS.ScalarByte)
  size_t total_size = 0;

  if (has_val()) {
    // required bytes val = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->val());
  }

  if (has_secondsintoyear()) {
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->secondsintoyear());
  }

  if (has_nano()) {
    // required uint32 nano = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nano());
  }

  return total_size;
}
size_t ScalarByte::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EPICS.ScalarByte)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes val = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->val());

    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->secondsintoyear());

    // required uint32 nano = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nano());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .EPICS.FieldValue fieldvalues = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->fieldvalues_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fieldvalues(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 120u) {
    // optional int32 severity = 4 [default = 0];
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->severity());
    }

    // optional int32 status = 5 [default = 0];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional uint32 repeatcount = 6;
    if (has_repeatcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->repeatcount());
    }

    // optional bool fieldactualchange = 8;
    if (has_fieldactualchange()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarByte::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EPICS.ScalarByte)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarByte* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScalarByte>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EPICS.ScalarByte)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EPICS.ScalarByte)
    MergeFrom(*source);
  }
}

void ScalarByte::MergeFrom(const ScalarByte& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EPICS.ScalarByte)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fieldvalues_.MergeFrom(from.fieldvalues_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_val();
      val_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.val_);
    }
    if (cached_has_bits & 0x00000002u) {
      secondsintoyear_ = from.secondsintoyear_;
    }
    if (cached_has_bits & 0x00000004u) {
      nano_ = from.nano_;
    }
    if (cached_has_bits & 0x00000008u) {
      severity_ = from.severity_;
    }
    if (cached_has_bits & 0x00000010u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000020u) {
      repeatcount_ = from.repeatcount_;
    }
    if (cached_has_bits & 0x00000040u) {
      fieldactualchange_ = from.fieldactualchange_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScalarByte::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EPICS.ScalarByte)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarByte::CopyFrom(const ScalarByte& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EPICS.ScalarByte)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarByte::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->fieldvalues())) return false;
  return true;
}

void ScalarByte::Swap(ScalarByte* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScalarByte::InternalSwap(ScalarByte* other) {
  using std::swap;
  CastToBase(&fieldvalues_)->InternalSwap(CastToBase(&other->fieldvalues_));
  val_.Swap(&other->val_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(secondsintoyear_, other->secondsintoyear_);
  swap(nano_, other->nano_);
  swap(severity_, other->severity_);
  swap(status_, other->status_);
  swap(repeatcount_, other->repeatcount_);
  swap(fieldactualchange_, other->fieldactualchange_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ScalarByte::GetMetadata() const {
  protobuf_epics_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_epics_5fevent_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ScalarShort::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScalarShort::kSecondsintoyearFieldNumber;
const int ScalarShort::kNanoFieldNumber;
const int ScalarShort::kValFieldNumber;
const int ScalarShort::kSeverityFieldNumber;
const int ScalarShort::kStatusFieldNumber;
const int ScalarShort::kRepeatcountFieldNumber;
const int ScalarShort::kFieldvaluesFieldNumber;
const int ScalarShort::kFieldactualchangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScalarShort::ScalarShort()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_epics_5fevent_2eproto::scc_info_ScalarShort.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:EPICS.ScalarShort)
}
ScalarShort::ScalarShort(const ScalarShort& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      fieldvalues_(from.fieldvalues_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&secondsintoyear_, &from.secondsintoyear_,
    static_cast<size_t>(reinterpret_cast<char*>(&fieldactualchange_) -
    reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  // @@protoc_insertion_point(copy_constructor:EPICS.ScalarShort)
}

void ScalarShort::SharedCtor() {
  ::memset(&secondsintoyear_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fieldactualchange_) -
      reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
}

ScalarShort::~ScalarShort() {
  // @@protoc_insertion_point(destructor:EPICS.ScalarShort)
  SharedDtor();
}

void ScalarShort::SharedDtor() {
}

void ScalarShort::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ScalarShort::descriptor() {
  ::protobuf_epics_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_epics_5fevent_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScalarShort& ScalarShort::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_epics_5fevent_2eproto::scc_info_ScalarShort.base);
  return *internal_default_instance();
}


void ScalarShort::Clear() {
// @@protoc_insertion_point(message_clear_start:EPICS.ScalarShort)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fieldvalues_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&secondsintoyear_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fieldactualchange_) -
        reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ScalarShort::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EPICS.ScalarShort)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 secondsintoyear = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_secondsintoyear();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondsintoyear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 nano = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_nano();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nano_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sint32 val = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_val();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &val_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 severity = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_severity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &severity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 status = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 repeatcount = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_repeatcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repeatcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .EPICS.FieldValue fieldvalues = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_fieldvalues()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fieldactualchange = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_fieldactualchange();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fieldactualchange_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EPICS.ScalarShort)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EPICS.ScalarShort)
  return false;
#undef DO_
}

void ScalarShort::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EPICS.ScalarShort)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 secondsintoyear = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->secondsintoyear(), output);
  }

  // required uint32 nano = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nano(), output);
  }

  // required sint32 val = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->val(), output);
  }

  // optional int32 severity = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->severity(), output);
  }

  // optional int32 status = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }

  // optional uint32 repeatcount = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->repeatcount(), output);
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fieldvalues_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->fieldvalues(static_cast<int>(i)),
      output);
  }

  // optional bool fieldactualchange = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->fieldactualchange(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EPICS.ScalarShort)
}

::google::protobuf::uint8* ScalarShort::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:EPICS.ScalarShort)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 secondsintoyear = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->secondsintoyear(), target);
  }

  // required uint32 nano = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nano(), target);
  }

  // required sint32 val = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->val(), target);
  }

  // optional int32 severity = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->severity(), target);
  }

  // optional int32 status = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }

  // optional uint32 repeatcount = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->repeatcount(), target);
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fieldvalues_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->fieldvalues(static_cast<int>(i)), deterministic, target);
  }

  // optional bool fieldactualchange = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->fieldactualchange(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EPICS.ScalarShort)
  return target;
}

size_t ScalarShort::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EPICS.ScalarShort)
  size_t total_size = 0;

  if (has_secondsintoyear()) {
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->secondsintoyear());
  }

  if (has_nano()) {
    // required uint32 nano = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nano());
  }

  if (has_val()) {
    // required sint32 val = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->val());
  }

  return total_size;
}
size_t ScalarShort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EPICS.ScalarShort)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->secondsintoyear());

    // required uint32 nano = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nano());

    // required sint32 val = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->val());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .EPICS.FieldValue fieldvalues = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->fieldvalues_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fieldvalues(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 120u) {
    // optional int32 severity = 4 [default = 0];
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->severity());
    }

    // optional int32 status = 5 [default = 0];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional uint32 repeatcount = 6;
    if (has_repeatcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->repeatcount());
    }

    // optional bool fieldactualchange = 8;
    if (has_fieldactualchange()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarShort::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EPICS.ScalarShort)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarShort* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScalarShort>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EPICS.ScalarShort)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EPICS.ScalarShort)
    MergeFrom(*source);
  }
}

void ScalarShort::MergeFrom(const ScalarShort& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EPICS.ScalarShort)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fieldvalues_.MergeFrom(from.fieldvalues_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      secondsintoyear_ = from.secondsintoyear_;
    }
    if (cached_has_bits & 0x00000002u) {
      nano_ = from.nano_;
    }
    if (cached_has_bits & 0x00000004u) {
      val_ = from.val_;
    }
    if (cached_has_bits & 0x00000008u) {
      severity_ = from.severity_;
    }
    if (cached_has_bits & 0x00000010u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000020u) {
      repeatcount_ = from.repeatcount_;
    }
    if (cached_has_bits & 0x00000040u) {
      fieldactualchange_ = from.fieldactualchange_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScalarShort::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EPICS.ScalarShort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarShort::CopyFrom(const ScalarShort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EPICS.ScalarShort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarShort::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->fieldvalues())) return false;
  return true;
}

void ScalarShort::Swap(ScalarShort* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScalarShort::InternalSwap(ScalarShort* other) {
  using std::swap;
  CastToBase(&fieldvalues_)->InternalSwap(CastToBase(&other->fieldvalues_));
  swap(secondsintoyear_, other->secondsintoyear_);
  swap(nano_, other->nano_);
  swap(val_, other->val_);
  swap(severity_, other->severity_);
  swap(status_, other->status_);
  swap(repeatcount_, other->repeatcount_);
  swap(fieldactualchange_, other->fieldactualchange_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ScalarShort::GetMetadata() const {
  protobuf_epics_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_epics_5fevent_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ScalarInt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScalarInt::kSecondsintoyearFieldNumber;
const int ScalarInt::kNanoFieldNumber;
const int ScalarInt::kValFieldNumber;
const int ScalarInt::kSeverityFieldNumber;
const int ScalarInt::kStatusFieldNumber;
const int ScalarInt::kRepeatcountFieldNumber;
const int ScalarInt::kFieldvaluesFieldNumber;
const int ScalarInt::kFieldactualchangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScalarInt::ScalarInt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_epics_5fevent_2eproto::scc_info_ScalarInt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:EPICS.ScalarInt)
}
ScalarInt::ScalarInt(const ScalarInt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      fieldvalues_(from.fieldvalues_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&secondsintoyear_, &from.secondsintoyear_,
    static_cast<size_t>(reinterpret_cast<char*>(&fieldactualchange_) -
    reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  // @@protoc_insertion_point(copy_constructor:EPICS.ScalarInt)
}

void ScalarInt::SharedCtor() {
  ::memset(&secondsintoyear_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fieldactualchange_) -
      reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
}

ScalarInt::~ScalarInt() {
  // @@protoc_insertion_point(destructor:EPICS.ScalarInt)
  SharedDtor();
}

void ScalarInt::SharedDtor() {
}

void ScalarInt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ScalarInt::descriptor() {
  ::protobuf_epics_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_epics_5fevent_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScalarInt& ScalarInt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_epics_5fevent_2eproto::scc_info_ScalarInt.base);
  return *internal_default_instance();
}


void ScalarInt::Clear() {
// @@protoc_insertion_point(message_clear_start:EPICS.ScalarInt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fieldvalues_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&secondsintoyear_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fieldactualchange_) -
        reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ScalarInt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EPICS.ScalarInt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 secondsintoyear = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_secondsintoyear();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondsintoyear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 nano = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_nano();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nano_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed32 val = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_val();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &val_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 severity = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_severity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &severity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 status = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 repeatcount = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_repeatcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repeatcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .EPICS.FieldValue fieldvalues = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_fieldvalues()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fieldactualchange = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_fieldactualchange();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fieldactualchange_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EPICS.ScalarInt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EPICS.ScalarInt)
  return false;
#undef DO_
}

void ScalarInt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EPICS.ScalarInt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 secondsintoyear = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->secondsintoyear(), output);
  }

  // required uint32 nano = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nano(), output);
  }

  // required sfixed32 val = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(3, this->val(), output);
  }

  // optional int32 severity = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->severity(), output);
  }

  // optional int32 status = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }

  // optional uint32 repeatcount = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->repeatcount(), output);
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fieldvalues_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->fieldvalues(static_cast<int>(i)),
      output);
  }

  // optional bool fieldactualchange = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->fieldactualchange(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EPICS.ScalarInt)
}

::google::protobuf::uint8* ScalarInt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:EPICS.ScalarInt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 secondsintoyear = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->secondsintoyear(), target);
  }

  // required uint32 nano = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nano(), target);
  }

  // required sfixed32 val = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(3, this->val(), target);
  }

  // optional int32 severity = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->severity(), target);
  }

  // optional int32 status = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }

  // optional uint32 repeatcount = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->repeatcount(), target);
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fieldvalues_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->fieldvalues(static_cast<int>(i)), deterministic, target);
  }

  // optional bool fieldactualchange = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->fieldactualchange(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EPICS.ScalarInt)
  return target;
}

size_t ScalarInt::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EPICS.ScalarInt)
  size_t total_size = 0;

  if (has_secondsintoyear()) {
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->secondsintoyear());
  }

  if (has_nano()) {
    // required uint32 nano = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nano());
  }

  if (has_val()) {
    // required sfixed32 val = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t ScalarInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EPICS.ScalarInt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->secondsintoyear());

    // required uint32 nano = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nano());

    // required sfixed32 val = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .EPICS.FieldValue fieldvalues = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->fieldvalues_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fieldvalues(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 120u) {
    // optional int32 severity = 4 [default = 0];
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->severity());
    }

    // optional int32 status = 5 [default = 0];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional uint32 repeatcount = 6;
    if (has_repeatcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->repeatcount());
    }

    // optional bool fieldactualchange = 8;
    if (has_fieldactualchange()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarInt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EPICS.ScalarInt)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarInt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScalarInt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EPICS.ScalarInt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EPICS.ScalarInt)
    MergeFrom(*source);
  }
}

void ScalarInt::MergeFrom(const ScalarInt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EPICS.ScalarInt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fieldvalues_.MergeFrom(from.fieldvalues_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      secondsintoyear_ = from.secondsintoyear_;
    }
    if (cached_has_bits & 0x00000002u) {
      nano_ = from.nano_;
    }
    if (cached_has_bits & 0x00000004u) {
      val_ = from.val_;
    }
    if (cached_has_bits & 0x00000008u) {
      severity_ = from.severity_;
    }
    if (cached_has_bits & 0x00000010u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000020u) {
      repeatcount_ = from.repeatcount_;
    }
    if (cached_has_bits & 0x00000040u) {
      fieldactualchange_ = from.fieldactualchange_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScalarInt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EPICS.ScalarInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarInt::CopyFrom(const ScalarInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EPICS.ScalarInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarInt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->fieldvalues())) return false;
  return true;
}

void ScalarInt::Swap(ScalarInt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScalarInt::InternalSwap(ScalarInt* other) {
  using std::swap;
  CastToBase(&fieldvalues_)->InternalSwap(CastToBase(&other->fieldvalues_));
  swap(secondsintoyear_, other->secondsintoyear_);
  swap(nano_, other->nano_);
  swap(val_, other->val_);
  swap(severity_, other->severity_);
  swap(status_, other->status_);
  swap(repeatcount_, other->repeatcount_);
  swap(fieldactualchange_, other->fieldactualchange_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ScalarInt::GetMetadata() const {
  protobuf_epics_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_epics_5fevent_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ScalarEnum::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScalarEnum::kSecondsintoyearFieldNumber;
const int ScalarEnum::kNanoFieldNumber;
const int ScalarEnum::kValFieldNumber;
const int ScalarEnum::kSeverityFieldNumber;
const int ScalarEnum::kStatusFieldNumber;
const int ScalarEnum::kRepeatcountFieldNumber;
const int ScalarEnum::kFieldvaluesFieldNumber;
const int ScalarEnum::kFieldactualchangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScalarEnum::ScalarEnum()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_epics_5fevent_2eproto::scc_info_ScalarEnum.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:EPICS.ScalarEnum)
}
ScalarEnum::ScalarEnum(const ScalarEnum& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      fieldvalues_(from.fieldvalues_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&secondsintoyear_, &from.secondsintoyear_,
    static_cast<size_t>(reinterpret_cast<char*>(&fieldactualchange_) -
    reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  // @@protoc_insertion_point(copy_constructor:EPICS.ScalarEnum)
}

void ScalarEnum::SharedCtor() {
  ::memset(&secondsintoyear_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fieldactualchange_) -
      reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
}

ScalarEnum::~ScalarEnum() {
  // @@protoc_insertion_point(destructor:EPICS.ScalarEnum)
  SharedDtor();
}

void ScalarEnum::SharedDtor() {
}

void ScalarEnum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ScalarEnum::descriptor() {
  ::protobuf_epics_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_epics_5fevent_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScalarEnum& ScalarEnum::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_epics_5fevent_2eproto::scc_info_ScalarEnum.base);
  return *internal_default_instance();
}


void ScalarEnum::Clear() {
// @@protoc_insertion_point(message_clear_start:EPICS.ScalarEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fieldvalues_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&secondsintoyear_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fieldactualchange_) -
        reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ScalarEnum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EPICS.ScalarEnum)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 secondsintoyear = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_secondsintoyear();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondsintoyear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 nano = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_nano();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nano_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sint32 val = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_val();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &val_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 severity = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_severity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &severity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 status = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 repeatcount = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_repeatcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repeatcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .EPICS.FieldValue fieldvalues = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_fieldvalues()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fieldactualchange = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_fieldactualchange();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fieldactualchange_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EPICS.ScalarEnum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EPICS.ScalarEnum)
  return false;
#undef DO_
}

void ScalarEnum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EPICS.ScalarEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 secondsintoyear = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->secondsintoyear(), output);
  }

  // required uint32 nano = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nano(), output);
  }

  // required sint32 val = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->val(), output);
  }

  // optional int32 severity = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->severity(), output);
  }

  // optional int32 status = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }

  // optional uint32 repeatcount = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->repeatcount(), output);
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fieldvalues_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->fieldvalues(static_cast<int>(i)),
      output);
  }

  // optional bool fieldactualchange = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->fieldactualchange(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EPICS.ScalarEnum)
}

::google::protobuf::uint8* ScalarEnum::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:EPICS.ScalarEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 secondsintoyear = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->secondsintoyear(), target);
  }

  // required uint32 nano = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nano(), target);
  }

  // required sint32 val = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->val(), target);
  }

  // optional int32 severity = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->severity(), target);
  }

  // optional int32 status = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }

  // optional uint32 repeatcount = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->repeatcount(), target);
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fieldvalues_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->fieldvalues(static_cast<int>(i)), deterministic, target);
  }

  // optional bool fieldactualchange = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->fieldactualchange(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EPICS.ScalarEnum)
  return target;
}

size_t ScalarEnum::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EPICS.ScalarEnum)
  size_t total_size = 0;

  if (has_secondsintoyear()) {
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->secondsintoyear());
  }

  if (has_nano()) {
    // required uint32 nano = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nano());
  }

  if (has_val()) {
    // required sint32 val = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->val());
  }

  return total_size;
}
size_t ScalarEnum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EPICS.ScalarEnum)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->secondsintoyear());

    // required uint32 nano = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nano());

    // required sint32 val = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->val());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .EPICS.FieldValue fieldvalues = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->fieldvalues_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fieldvalues(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 120u) {
    // optional int32 severity = 4 [default = 0];
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->severity());
    }

    // optional int32 status = 5 [default = 0];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional uint32 repeatcount = 6;
    if (has_repeatcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->repeatcount());
    }

    // optional bool fieldactualchange = 8;
    if (has_fieldactualchange()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarEnum::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EPICS.ScalarEnum)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarEnum* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScalarEnum>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EPICS.ScalarEnum)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EPICS.ScalarEnum)
    MergeFrom(*source);
  }
}

void ScalarEnum::MergeFrom(const ScalarEnum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EPICS.ScalarEnum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fieldvalues_.MergeFrom(from.fieldvalues_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      secondsintoyear_ = from.secondsintoyear_;
    }
    if (cached_has_bits & 0x00000002u) {
      nano_ = from.nano_;
    }
    if (cached_has_bits & 0x00000004u) {
      val_ = from.val_;
    }
    if (cached_has_bits & 0x00000008u) {
      severity_ = from.severity_;
    }
    if (cached_has_bits & 0x00000010u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000020u) {
      repeatcount_ = from.repeatcount_;
    }
    if (cached_has_bits & 0x00000040u) {
      fieldactualchange_ = from.fieldactualchange_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScalarEnum::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EPICS.ScalarEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarEnum::CopyFrom(const ScalarEnum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EPICS.ScalarEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarEnum::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->fieldvalues())) return false;
  return true;
}

void ScalarEnum::Swap(ScalarEnum* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScalarEnum::InternalSwap(ScalarEnum* other) {
  using std::swap;
  CastToBase(&fieldvalues_)->InternalSwap(CastToBase(&other->fieldvalues_));
  swap(secondsintoyear_, other->secondsintoyear_);
  swap(nano_, other->nano_);
  swap(val_, other->val_);
  swap(severity_, other->severity_);
  swap(status_, other->status_);
  swap(repeatcount_, other->repeatcount_);
  swap(fieldactualchange_, other->fieldactualchange_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ScalarEnum::GetMetadata() const {
  protobuf_epics_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_epics_5fevent_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ScalarFloat::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScalarFloat::kSecondsintoyearFieldNumber;
const int ScalarFloat::kNanoFieldNumber;
const int ScalarFloat::kValFieldNumber;
const int ScalarFloat::kSeverityFieldNumber;
const int ScalarFloat::kStatusFieldNumber;
const int ScalarFloat::kRepeatcountFieldNumber;
const int ScalarFloat::kFieldvaluesFieldNumber;
const int ScalarFloat::kFieldactualchangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScalarFloat::ScalarFloat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_epics_5fevent_2eproto::scc_info_ScalarFloat.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:EPICS.ScalarFloat)
}
ScalarFloat::ScalarFloat(const ScalarFloat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      fieldvalues_(from.fieldvalues_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&secondsintoyear_, &from.secondsintoyear_,
    static_cast<size_t>(reinterpret_cast<char*>(&fieldactualchange_) -
    reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  // @@protoc_insertion_point(copy_constructor:EPICS.ScalarFloat)
}

void ScalarFloat::SharedCtor() {
  ::memset(&secondsintoyear_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fieldactualchange_) -
      reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
}

ScalarFloat::~ScalarFloat() {
  // @@protoc_insertion_point(destructor:EPICS.ScalarFloat)
  SharedDtor();
}

void ScalarFloat::SharedDtor() {
}

void ScalarFloat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ScalarFloat::descriptor() {
  ::protobuf_epics_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_epics_5fevent_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScalarFloat& ScalarFloat::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_epics_5fevent_2eproto::scc_info_ScalarFloat.base);
  return *internal_default_instance();
}


void ScalarFloat::Clear() {
// @@protoc_insertion_point(message_clear_start:EPICS.ScalarFloat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fieldvalues_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&secondsintoyear_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fieldactualchange_) -
        reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ScalarFloat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EPICS.ScalarFloat)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 secondsintoyear = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_secondsintoyear();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondsintoyear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 nano = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_nano();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nano_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float val = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_val();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &val_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 severity = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_severity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &severity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 status = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 repeatcount = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_repeatcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repeatcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .EPICS.FieldValue fieldvalues = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_fieldvalues()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fieldactualchange = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_fieldactualchange();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fieldactualchange_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EPICS.ScalarFloat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EPICS.ScalarFloat)
  return false;
#undef DO_
}

void ScalarFloat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EPICS.ScalarFloat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 secondsintoyear = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->secondsintoyear(), output);
  }

  // required uint32 nano = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nano(), output);
  }

  // required float val = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->val(), output);
  }

  // optional int32 severity = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->severity(), output);
  }

  // optional int32 status = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }

  // optional uint32 repeatcount = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->repeatcount(), output);
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fieldvalues_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->fieldvalues(static_cast<int>(i)),
      output);
  }

  // optional bool fieldactualchange = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->fieldactualchange(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EPICS.ScalarFloat)
}

::google::protobuf::uint8* ScalarFloat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:EPICS.ScalarFloat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 secondsintoyear = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->secondsintoyear(), target);
  }

  // required uint32 nano = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nano(), target);
  }

  // required float val = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->val(), target);
  }

  // optional int32 severity = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->severity(), target);
  }

  // optional int32 status = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }

  // optional uint32 repeatcount = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->repeatcount(), target);
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fieldvalues_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->fieldvalues(static_cast<int>(i)), deterministic, target);
  }

  // optional bool fieldactualchange = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->fieldactualchange(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EPICS.ScalarFloat)
  return target;
}

size_t ScalarFloat::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EPICS.ScalarFloat)
  size_t total_size = 0;

  if (has_secondsintoyear()) {
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->secondsintoyear());
  }

  if (has_nano()) {
    // required uint32 nano = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nano());
  }

  if (has_val()) {
    // required float val = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t ScalarFloat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EPICS.ScalarFloat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->secondsintoyear());

    // required uint32 nano = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nano());

    // required float val = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .EPICS.FieldValue fieldvalues = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->fieldvalues_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fieldvalues(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 120u) {
    // optional int32 severity = 4 [default = 0];
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->severity());
    }

    // optional int32 status = 5 [default = 0];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional uint32 repeatcount = 6;
    if (has_repeatcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->repeatcount());
    }

    // optional bool fieldactualchange = 8;
    if (has_fieldactualchange()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarFloat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EPICS.ScalarFloat)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarFloat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScalarFloat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EPICS.ScalarFloat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EPICS.ScalarFloat)
    MergeFrom(*source);
  }
}

void ScalarFloat::MergeFrom(const ScalarFloat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EPICS.ScalarFloat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fieldvalues_.MergeFrom(from.fieldvalues_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      secondsintoyear_ = from.secondsintoyear_;
    }
    if (cached_has_bits & 0x00000002u) {
      nano_ = from.nano_;
    }
    if (cached_has_bits & 0x00000004u) {
      val_ = from.val_;
    }
    if (cached_has_bits & 0x00000008u) {
      severity_ = from.severity_;
    }
    if (cached_has_bits & 0x00000010u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000020u) {
      repeatcount_ = from.repeatcount_;
    }
    if (cached_has_bits & 0x00000040u) {
      fieldactualchange_ = from.fieldactualchange_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScalarFloat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EPICS.ScalarFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarFloat::CopyFrom(const ScalarFloat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EPICS.ScalarFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarFloat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->fieldvalues())) return false;
  return true;
}

void ScalarFloat::Swap(ScalarFloat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScalarFloat::InternalSwap(ScalarFloat* other) {
  using std::swap;
  CastToBase(&fieldvalues_)->InternalSwap(CastToBase(&other->fieldvalues_));
  swap(secondsintoyear_, other->secondsintoyear_);
  swap(nano_, other->nano_);
  swap(val_, other->val_);
  swap(severity_, other->severity_);
  swap(status_, other->status_);
  swap(repeatcount_, other->repeatcount_);
  swap(fieldactualchange_, other->fieldactualchange_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ScalarFloat::GetMetadata() const {
  protobuf_epics_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_epics_5fevent_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ScalarDouble::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScalarDouble::kSecondsintoyearFieldNumber;
const int ScalarDouble::kNanoFieldNumber;
const int ScalarDouble::kValFieldNumber;
const int ScalarDouble::kSeverityFieldNumber;
const int ScalarDouble::kStatusFieldNumber;
const int ScalarDouble::kRepeatcountFieldNumber;
const int ScalarDouble::kFieldvaluesFieldNumber;
const int ScalarDouble::kFieldactualchangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScalarDouble::ScalarDouble()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_epics_5fevent_2eproto::scc_info_ScalarDouble.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:EPICS.ScalarDouble)
}
ScalarDouble::ScalarDouble(const ScalarDouble& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      fieldvalues_(from.fieldvalues_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&secondsintoyear_, &from.secondsintoyear_,
    static_cast<size_t>(reinterpret_cast<char*>(&fieldactualchange_) -
    reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  // @@protoc_insertion_point(copy_constructor:EPICS.ScalarDouble)
}

void ScalarDouble::SharedCtor() {
  ::memset(&secondsintoyear_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fieldactualchange_) -
      reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
}

ScalarDouble::~ScalarDouble() {
  // @@protoc_insertion_point(destructor:EPICS.ScalarDouble)
  SharedDtor();
}

void ScalarDouble::SharedDtor() {
}

void ScalarDouble::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ScalarDouble::descriptor() {
  ::protobuf_epics_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_epics_5fevent_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScalarDouble& ScalarDouble::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_epics_5fevent_2eproto::scc_info_ScalarDouble.base);
  return *internal_default_instance();
}


void ScalarDouble::Clear() {
// @@protoc_insertion_point(message_clear_start:EPICS.ScalarDouble)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fieldvalues_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&secondsintoyear_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fieldactualchange_) -
        reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ScalarDouble::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EPICS.ScalarDouble)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 secondsintoyear = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_secondsintoyear();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondsintoyear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 nano = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_nano();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nano_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double val = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_val();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &val_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 severity = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_severity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &severity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 status = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 repeatcount = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_repeatcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repeatcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .EPICS.FieldValue fieldvalues = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_fieldvalues()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fieldactualchange = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_fieldactualchange();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fieldactualchange_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EPICS.ScalarDouble)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EPICS.ScalarDouble)
  return false;
#undef DO_
}

void ScalarDouble::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EPICS.ScalarDouble)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 secondsintoyear = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->secondsintoyear(), output);
  }

  // required uint32 nano = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nano(), output);
  }

  // required double val = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->val(), output);
  }

  // optional int32 severity = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->severity(), output);
  }

  // optional int32 status = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }

  // optional uint32 repeatcount = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->repeatcount(), output);
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fieldvalues_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->fieldvalues(static_cast<int>(i)),
      output);
  }

  // optional bool fieldactualchange = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->fieldactualchange(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EPICS.ScalarDouble)
}

::google::protobuf::uint8* ScalarDouble::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:EPICS.ScalarDouble)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 secondsintoyear = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->secondsintoyear(), target);
  }

  // required uint32 nano = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nano(), target);
  }

  // required double val = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->val(), target);
  }

  // optional int32 severity = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->severity(), target);
  }

  // optional int32 status = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }

  // optional uint32 repeatcount = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->repeatcount(), target);
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fieldvalues_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->fieldvalues(static_cast<int>(i)), deterministic, target);
  }

  // optional bool fieldactualchange = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->fieldactualchange(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EPICS.ScalarDouble)
  return target;
}

size_t ScalarDouble::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EPICS.ScalarDouble)
  size_t total_size = 0;

  if (has_secondsintoyear()) {
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->secondsintoyear());
  }

  if (has_nano()) {
    // required uint32 nano = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nano());
  }

  if (has_val()) {
    // required double val = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t ScalarDouble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EPICS.ScalarDouble)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->secondsintoyear());

    // required uint32 nano = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nano());

    // required double val = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .EPICS.FieldValue fieldvalues = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->fieldvalues_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fieldvalues(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 120u) {
    // optional int32 severity = 4 [default = 0];
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->severity());
    }

    // optional int32 status = 5 [default = 0];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional uint32 repeatcount = 6;
    if (has_repeatcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->repeatcount());
    }

    // optional bool fieldactualchange = 8;
    if (has_fieldactualchange()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarDouble::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EPICS.ScalarDouble)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarDouble* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScalarDouble>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EPICS.ScalarDouble)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EPICS.ScalarDouble)
    MergeFrom(*source);
  }
}

void ScalarDouble::MergeFrom(const ScalarDouble& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EPICS.ScalarDouble)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fieldvalues_.MergeFrom(from.fieldvalues_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      secondsintoyear_ = from.secondsintoyear_;
    }
    if (cached_has_bits & 0x00000002u) {
      nano_ = from.nano_;
    }
    if (cached_has_bits & 0x00000004u) {
      val_ = from.val_;
    }
    if (cached_has_bits & 0x00000008u) {
      severity_ = from.severity_;
    }
    if (cached_has_bits & 0x00000010u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000020u) {
      repeatcount_ = from.repeatcount_;
    }
    if (cached_has_bits & 0x00000040u) {
      fieldactualchange_ = from.fieldactualchange_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScalarDouble::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EPICS.ScalarDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarDouble::CopyFrom(const ScalarDouble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EPICS.ScalarDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarDouble::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->fieldvalues())) return false;
  return true;
}

void ScalarDouble::Swap(ScalarDouble* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScalarDouble::InternalSwap(ScalarDouble* other) {
  using std::swap;
  CastToBase(&fieldvalues_)->InternalSwap(CastToBase(&other->fieldvalues_));
  swap(secondsintoyear_, other->secondsintoyear_);
  swap(nano_, other->nano_);
  swap(val_, other->val_);
  swap(severity_, other->severity_);
  swap(status_, other->status_);
  swap(repeatcount_, other->repeatcount_);
  swap(fieldactualchange_, other->fieldactualchange_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ScalarDouble::GetMetadata() const {
  protobuf_epics_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_epics_5fevent_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VectorString::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VectorString::kSecondsintoyearFieldNumber;
const int VectorString::kNanoFieldNumber;
const int VectorString::kValFieldNumber;
const int VectorString::kSeverityFieldNumber;
const int VectorString::kStatusFieldNumber;
const int VectorString::kRepeatcountFieldNumber;
const int VectorString::kFieldvaluesFieldNumber;
const int VectorString::kFieldactualchangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VectorString::VectorString()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_epics_5fevent_2eproto::scc_info_VectorString.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:EPICS.VectorString)
}
VectorString::VectorString(const VectorString& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      val_(from.val_),
      fieldvalues_(from.fieldvalues_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&secondsintoyear_, &from.secondsintoyear_,
    static_cast<size_t>(reinterpret_cast<char*>(&fieldactualchange_) -
    reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  // @@protoc_insertion_point(copy_constructor:EPICS.VectorString)
}

void VectorString::SharedCtor() {
  ::memset(&secondsintoyear_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fieldactualchange_) -
      reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
}

VectorString::~VectorString() {
  // @@protoc_insertion_point(destructor:EPICS.VectorString)
  SharedDtor();
}

void VectorString::SharedDtor() {
}

void VectorString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VectorString::descriptor() {
  ::protobuf_epics_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_epics_5fevent_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VectorString& VectorString::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_epics_5fevent_2eproto::scc_info_VectorString.base);
  return *internal_default_instance();
}


void VectorString::Clear() {
// @@protoc_insertion_point(message_clear_start:EPICS.VectorString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  val_.Clear();
  fieldvalues_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&secondsintoyear_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fieldactualchange_) -
        reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VectorString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EPICS.VectorString)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 secondsintoyear = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_secondsintoyear();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondsintoyear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 nano = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_nano();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nano_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string val = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_val()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->val(this->val_size() - 1).data(),
            static_cast<int>(this->val(this->val_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "EPICS.VectorString.val");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 severity = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_severity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &severity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 status = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 repeatcount = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_repeatcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repeatcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .EPICS.FieldValue fieldvalues = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_fieldvalues()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fieldactualchange = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_fieldactualchange();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fieldactualchange_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EPICS.VectorString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EPICS.VectorString)
  return false;
#undef DO_
}

void VectorString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EPICS.VectorString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 secondsintoyear = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->secondsintoyear(), output);
  }

  // required uint32 nano = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nano(), output);
  }

  // repeated string val = 3;
  for (int i = 0, n = this->val_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->val(i).data(), static_cast<int>(this->val(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "EPICS.VectorString.val");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->val(i), output);
  }

  // optional int32 severity = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->severity(), output);
  }

  // optional int32 status = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }

  // optional uint32 repeatcount = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->repeatcount(), output);
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fieldvalues_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->fieldvalues(static_cast<int>(i)),
      output);
  }

  // optional bool fieldactualchange = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->fieldactualchange(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EPICS.VectorString)
}

::google::protobuf::uint8* VectorString::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:EPICS.VectorString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 secondsintoyear = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->secondsintoyear(), target);
  }

  // required uint32 nano = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nano(), target);
  }

  // repeated string val = 3;
  for (int i = 0, n = this->val_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->val(i).data(), static_cast<int>(this->val(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "EPICS.VectorString.val");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->val(i), target);
  }

  // optional int32 severity = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->severity(), target);
  }

  // optional int32 status = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }

  // optional uint32 repeatcount = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->repeatcount(), target);
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fieldvalues_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->fieldvalues(static_cast<int>(i)), deterministic, target);
  }

  // optional bool fieldactualchange = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->fieldactualchange(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EPICS.VectorString)
  return target;
}

size_t VectorString::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EPICS.VectorString)
  size_t total_size = 0;

  if (has_secondsintoyear()) {
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->secondsintoyear());
  }

  if (has_nano()) {
    // required uint32 nano = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nano());
  }

  return total_size;
}
size_t VectorString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EPICS.VectorString)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->secondsintoyear());

    // required uint32 nano = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nano());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string val = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->val_size());
  for (int i = 0, n = this->val_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->val(i));
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->fieldvalues_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fieldvalues(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 60u) {
    // optional int32 severity = 4 [default = 0];
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->severity());
    }

    // optional int32 status = 5 [default = 0];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional uint32 repeatcount = 6;
    if (has_repeatcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->repeatcount());
    }

    // optional bool fieldactualchange = 8;
    if (has_fieldactualchange()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorString::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EPICS.VectorString)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorString* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VectorString>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EPICS.VectorString)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EPICS.VectorString)
    MergeFrom(*source);
  }
}

void VectorString::MergeFrom(const VectorString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EPICS.VectorString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  val_.MergeFrom(from.val_);
  fieldvalues_.MergeFrom(from.fieldvalues_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      secondsintoyear_ = from.secondsintoyear_;
    }
    if (cached_has_bits & 0x00000002u) {
      nano_ = from.nano_;
    }
    if (cached_has_bits & 0x00000004u) {
      severity_ = from.severity_;
    }
    if (cached_has_bits & 0x00000008u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000010u) {
      repeatcount_ = from.repeatcount_;
    }
    if (cached_has_bits & 0x00000020u) {
      fieldactualchange_ = from.fieldactualchange_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VectorString::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EPICS.VectorString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorString::CopyFrom(const VectorString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EPICS.VectorString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorString::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->fieldvalues())) return false;
  return true;
}

void VectorString::Swap(VectorString* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VectorString::InternalSwap(VectorString* other) {
  using std::swap;
  val_.InternalSwap(CastToBase(&other->val_));
  CastToBase(&fieldvalues_)->InternalSwap(CastToBase(&other->fieldvalues_));
  swap(secondsintoyear_, other->secondsintoyear_);
  swap(nano_, other->nano_);
  swap(severity_, other->severity_);
  swap(status_, other->status_);
  swap(repeatcount_, other->repeatcount_);
  swap(fieldactualchange_, other->fieldactualchange_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VectorString::GetMetadata() const {
  protobuf_epics_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_epics_5fevent_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VectorChar::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VectorChar::kSecondsintoyearFieldNumber;
const int VectorChar::kNanoFieldNumber;
const int VectorChar::kValFieldNumber;
const int VectorChar::kSeverityFieldNumber;
const int VectorChar::kStatusFieldNumber;
const int VectorChar::kRepeatcountFieldNumber;
const int VectorChar::kFieldvaluesFieldNumber;
const int VectorChar::kFieldactualchangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VectorChar::VectorChar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_epics_5fevent_2eproto::scc_info_VectorChar.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:EPICS.VectorChar)
}
VectorChar::VectorChar(const VectorChar& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      fieldvalues_(from.fieldvalues_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  val_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_val()) {
    val_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.val_);
  }
  ::memcpy(&secondsintoyear_, &from.secondsintoyear_,
    static_cast<size_t>(reinterpret_cast<char*>(&fieldactualchange_) -
    reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  // @@protoc_insertion_point(copy_constructor:EPICS.VectorChar)
}

void VectorChar::SharedCtor() {
  val_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&secondsintoyear_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fieldactualchange_) -
      reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
}

VectorChar::~VectorChar() {
  // @@protoc_insertion_point(destructor:EPICS.VectorChar)
  SharedDtor();
}

void VectorChar::SharedDtor() {
  val_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VectorChar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VectorChar::descriptor() {
  ::protobuf_epics_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_epics_5fevent_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VectorChar& VectorChar::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_epics_5fevent_2eproto::scc_info_VectorChar.base);
  return *internal_default_instance();
}


void VectorChar::Clear() {
// @@protoc_insertion_point(message_clear_start:EPICS.VectorChar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fieldvalues_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    val_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 126u) {
    ::memset(&secondsintoyear_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fieldactualchange_) -
        reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VectorChar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EPICS.VectorChar)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 secondsintoyear = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_secondsintoyear();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondsintoyear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 nano = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_nano();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nano_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes val = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_val()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 severity = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_severity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &severity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 status = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 repeatcount = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_repeatcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repeatcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .EPICS.FieldValue fieldvalues = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_fieldvalues()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fieldactualchange = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_fieldactualchange();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fieldactualchange_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EPICS.VectorChar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EPICS.VectorChar)
  return false;
#undef DO_
}

void VectorChar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EPICS.VectorChar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 secondsintoyear = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->secondsintoyear(), output);
  }

  // required uint32 nano = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nano(), output);
  }

  // required bytes val = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->val(), output);
  }

  // optional int32 severity = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->severity(), output);
  }

  // optional int32 status = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }

  // optional uint32 repeatcount = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->repeatcount(), output);
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fieldvalues_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->fieldvalues(static_cast<int>(i)),
      output);
  }

  // optional bool fieldactualchange = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->fieldactualchange(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EPICS.VectorChar)
}

::google::protobuf::uint8* VectorChar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:EPICS.VectorChar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 secondsintoyear = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->secondsintoyear(), target);
  }

  // required uint32 nano = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nano(), target);
  }

  // required bytes val = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->val(), target);
  }

  // optional int32 severity = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->severity(), target);
  }

  // optional int32 status = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }

  // optional uint32 repeatcount = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->repeatcount(), target);
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fieldvalues_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->fieldvalues(static_cast<int>(i)), deterministic, target);
  }

  // optional bool fieldactualchange = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->fieldactualchange(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EPICS.VectorChar)
  return target;
}

size_t VectorChar::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EPICS.VectorChar)
  size_t total_size = 0;

  if (has_val()) {
    // required bytes val = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->val());
  }

  if (has_secondsintoyear()) {
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->secondsintoyear());
  }

  if (has_nano()) {
    // required uint32 nano = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nano());
  }

  return total_size;
}
size_t VectorChar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EPICS.VectorChar)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes val = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->val());

    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->secondsintoyear());

    // required uint32 nano = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nano());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .EPICS.FieldValue fieldvalues = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->fieldvalues_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fieldvalues(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 120u) {
    // optional int32 severity = 4 [default = 0];
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->severity());
    }

    // optional int32 status = 5 [default = 0];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional uint32 repeatcount = 6;
    if (has_repeatcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->repeatcount());
    }

    // optional bool fieldactualchange = 8;
    if (has_fieldactualchange()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorChar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EPICS.VectorChar)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorChar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VectorChar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EPICS.VectorChar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EPICS.VectorChar)
    MergeFrom(*source);
  }
}

void VectorChar::MergeFrom(const VectorChar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EPICS.VectorChar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fieldvalues_.MergeFrom(from.fieldvalues_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_val();
      val_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.val_);
    }
    if (cached_has_bits & 0x00000002u) {
      secondsintoyear_ = from.secondsintoyear_;
    }
    if (cached_has_bits & 0x00000004u) {
      nano_ = from.nano_;
    }
    if (cached_has_bits & 0x00000008u) {
      severity_ = from.severity_;
    }
    if (cached_has_bits & 0x00000010u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000020u) {
      repeatcount_ = from.repeatcount_;
    }
    if (cached_has_bits & 0x00000040u) {
      fieldactualchange_ = from.fieldactualchange_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VectorChar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EPICS.VectorChar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorChar::CopyFrom(const VectorChar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EPICS.VectorChar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorChar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->fieldvalues())) return false;
  return true;
}

void VectorChar::Swap(VectorChar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VectorChar::InternalSwap(VectorChar* other) {
  using std::swap;
  CastToBase(&fieldvalues_)->InternalSwap(CastToBase(&other->fieldvalues_));
  val_.Swap(&other->val_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(secondsintoyear_, other->secondsintoyear_);
  swap(nano_, other->nano_);
  swap(severity_, other->severity_);
  swap(status_, other->status_);
  swap(repeatcount_, other->repeatcount_);
  swap(fieldactualchange_, other->fieldactualchange_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VectorChar::GetMetadata() const {
  protobuf_epics_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_epics_5fevent_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VectorShort::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VectorShort::kSecondsintoyearFieldNumber;
const int VectorShort::kNanoFieldNumber;
const int VectorShort::kValFieldNumber;
const int VectorShort::kSeverityFieldNumber;
const int VectorShort::kStatusFieldNumber;
const int VectorShort::kRepeatcountFieldNumber;
const int VectorShort::kFieldvaluesFieldNumber;
const int VectorShort::kFieldactualchangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VectorShort::VectorShort()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_epics_5fevent_2eproto::scc_info_VectorShort.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:EPICS.VectorShort)
}
VectorShort::VectorShort(const VectorShort& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      val_(from.val_),
      fieldvalues_(from.fieldvalues_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&secondsintoyear_, &from.secondsintoyear_,
    static_cast<size_t>(reinterpret_cast<char*>(&fieldactualchange_) -
    reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  // @@protoc_insertion_point(copy_constructor:EPICS.VectorShort)
}

void VectorShort::SharedCtor() {
  ::memset(&secondsintoyear_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fieldactualchange_) -
      reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
}

VectorShort::~VectorShort() {
  // @@protoc_insertion_point(destructor:EPICS.VectorShort)
  SharedDtor();
}

void VectorShort::SharedDtor() {
}

void VectorShort::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VectorShort::descriptor() {
  ::protobuf_epics_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_epics_5fevent_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VectorShort& VectorShort::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_epics_5fevent_2eproto::scc_info_VectorShort.base);
  return *internal_default_instance();
}


void VectorShort::Clear() {
// @@protoc_insertion_point(message_clear_start:EPICS.VectorShort)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  val_.Clear();
  fieldvalues_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&secondsintoyear_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fieldactualchange_) -
        reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VectorShort::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EPICS.VectorShort)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 secondsintoyear = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_secondsintoyear();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondsintoyear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 nano = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_nano();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nano_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint32 val = 3 [packed = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_val())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 26u, input, this->mutable_val())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 severity = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_severity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &severity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 status = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 repeatcount = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_repeatcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repeatcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .EPICS.FieldValue fieldvalues = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_fieldvalues()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fieldactualchange = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_fieldactualchange();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fieldactualchange_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EPICS.VectorShort)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EPICS.VectorShort)
  return false;
#undef DO_
}

void VectorShort::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EPICS.VectorShort)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 secondsintoyear = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->secondsintoyear(), output);
  }

  // required uint32 nano = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nano(), output);
  }

  // repeated sint32 val = 3 [packed = true];
  if (this->val_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _val_cached_byte_size_));
  }
  for (int i = 0, n = this->val_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32NoTag(
      this->val(i), output);
  }

  // optional int32 severity = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->severity(), output);
  }

  // optional int32 status = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }

  // optional uint32 repeatcount = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->repeatcount(), output);
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fieldvalues_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->fieldvalues(static_cast<int>(i)),
      output);
  }

  // optional bool fieldactualchange = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->fieldactualchange(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EPICS.VectorShort)
}

::google::protobuf::uint8* VectorShort::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:EPICS.VectorShort)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 secondsintoyear = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->secondsintoyear(), target);
  }

  // required uint32 nano = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nano(), target);
  }

  // repeated sint32 val = 3 [packed = true];
  if (this->val_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _val_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32NoTagToArray(this->val_, target);
  }

  // optional int32 severity = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->severity(), target);
  }

  // optional int32 status = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }

  // optional uint32 repeatcount = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->repeatcount(), target);
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fieldvalues_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->fieldvalues(static_cast<int>(i)), deterministic, target);
  }

  // optional bool fieldactualchange = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->fieldactualchange(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EPICS.VectorShort)
  return target;
}

size_t VectorShort::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EPICS.VectorShort)
  size_t total_size = 0;

  if (has_secondsintoyear()) {
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->secondsintoyear());
  }

  if (has_nano()) {
    // required uint32 nano = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nano());
  }

  return total_size;
}
size_t VectorShort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EPICS.VectorShort)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->secondsintoyear());

    // required uint32 nano = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nano());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated sint32 val = 3 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt32Size(this->val_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _val_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->fieldvalues_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fieldvalues(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 60u) {
    // optional int32 severity = 4 [default = 0];
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->severity());
    }

    // optional int32 status = 5 [default = 0];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional uint32 repeatcount = 6;
    if (has_repeatcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->repeatcount());
    }

    // optional bool fieldactualchange = 8;
    if (has_fieldactualchange()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorShort::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EPICS.VectorShort)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorShort* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VectorShort>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EPICS.VectorShort)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EPICS.VectorShort)
    MergeFrom(*source);
  }
}

void VectorShort::MergeFrom(const VectorShort& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EPICS.VectorShort)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  val_.MergeFrom(from.val_);
  fieldvalues_.MergeFrom(from.fieldvalues_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      secondsintoyear_ = from.secondsintoyear_;
    }
    if (cached_has_bits & 0x00000002u) {
      nano_ = from.nano_;
    }
    if (cached_has_bits & 0x00000004u) {
      severity_ = from.severity_;
    }
    if (cached_has_bits & 0x00000008u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000010u) {
      repeatcount_ = from.repeatcount_;
    }
    if (cached_has_bits & 0x00000020u) {
      fieldactualchange_ = from.fieldactualchange_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VectorShort::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EPICS.VectorShort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorShort::CopyFrom(const VectorShort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EPICS.VectorShort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorShort::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->fieldvalues())) return false;
  return true;
}

void VectorShort::Swap(VectorShort* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VectorShort::InternalSwap(VectorShort* other) {
  using std::swap;
  val_.InternalSwap(&other->val_);
  CastToBase(&fieldvalues_)->InternalSwap(CastToBase(&other->fieldvalues_));
  swap(secondsintoyear_, other->secondsintoyear_);
  swap(nano_, other->nano_);
  swap(severity_, other->severity_);
  swap(status_, other->status_);
  swap(repeatcount_, other->repeatcount_);
  swap(fieldactualchange_, other->fieldactualchange_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VectorShort::GetMetadata() const {
  protobuf_epics_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_epics_5fevent_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VectorInt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VectorInt::kSecondsintoyearFieldNumber;
const int VectorInt::kNanoFieldNumber;
const int VectorInt::kValFieldNumber;
const int VectorInt::kSeverityFieldNumber;
const int VectorInt::kStatusFieldNumber;
const int VectorInt::kRepeatcountFieldNumber;
const int VectorInt::kFieldvaluesFieldNumber;
const int VectorInt::kFieldactualchangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VectorInt::VectorInt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_epics_5fevent_2eproto::scc_info_VectorInt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:EPICS.VectorInt)
}
VectorInt::VectorInt(const VectorInt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      val_(from.val_),
      fieldvalues_(from.fieldvalues_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&secondsintoyear_, &from.secondsintoyear_,
    static_cast<size_t>(reinterpret_cast<char*>(&fieldactualchange_) -
    reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  // @@protoc_insertion_point(copy_constructor:EPICS.VectorInt)
}

void VectorInt::SharedCtor() {
  ::memset(&secondsintoyear_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fieldactualchange_) -
      reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
}

VectorInt::~VectorInt() {
  // @@protoc_insertion_point(destructor:EPICS.VectorInt)
  SharedDtor();
}

void VectorInt::SharedDtor() {
}

void VectorInt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VectorInt::descriptor() {
  ::protobuf_epics_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_epics_5fevent_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VectorInt& VectorInt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_epics_5fevent_2eproto::scc_info_VectorInt.base);
  return *internal_default_instance();
}


void VectorInt::Clear() {
// @@protoc_insertion_point(message_clear_start:EPICS.VectorInt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  val_.Clear();
  fieldvalues_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&secondsintoyear_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fieldactualchange_) -
        reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VectorInt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EPICS.VectorInt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 secondsintoyear = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_secondsintoyear();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondsintoyear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 nano = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_nano();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nano_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sfixed32 val = 3 [packed = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, this->mutable_val())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 1, 26u, input, this->mutable_val())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 severity = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_severity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &severity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 status = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 repeatcount = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_repeatcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repeatcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .EPICS.FieldValue fieldvalues = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_fieldvalues()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fieldactualchange = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_fieldactualchange();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fieldactualchange_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EPICS.VectorInt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EPICS.VectorInt)
  return false;
#undef DO_
}

void VectorInt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EPICS.VectorInt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 secondsintoyear = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->secondsintoyear(), output);
  }

  // required uint32 nano = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nano(), output);
  }

  // repeated sfixed32 val = 3 [packed = true];
  if (this->val_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _val_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32Array(
      this->val().data(), this->val_size(), output);
  }

  // optional int32 severity = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->severity(), output);
  }

  // optional int32 status = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }

  // optional uint32 repeatcount = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->repeatcount(), output);
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fieldvalues_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->fieldvalues(static_cast<int>(i)),
      output);
  }

  // optional bool fieldactualchange = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->fieldactualchange(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EPICS.VectorInt)
}

::google::protobuf::uint8* VectorInt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:EPICS.VectorInt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 secondsintoyear = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->secondsintoyear(), target);
  }

  // required uint32 nano = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nano(), target);
  }

  // repeated sfixed32 val = 3 [packed = true];
  if (this->val_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _val_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSFixed32NoTagToArray(this->val_, target);
  }

  // optional int32 severity = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->severity(), target);
  }

  // optional int32 status = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }

  // optional uint32 repeatcount = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->repeatcount(), target);
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fieldvalues_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->fieldvalues(static_cast<int>(i)), deterministic, target);
  }

  // optional bool fieldactualchange = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->fieldactualchange(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EPICS.VectorInt)
  return target;
}

size_t VectorInt::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EPICS.VectorInt)
  size_t total_size = 0;

  if (has_secondsintoyear()) {
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->secondsintoyear());
  }

  if (has_nano()) {
    // required uint32 nano = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nano());
  }

  return total_size;
}
size_t VectorInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EPICS.VectorInt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->secondsintoyear());

    // required uint32 nano = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nano());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated sfixed32 val = 3 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->val_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _val_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->fieldvalues_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fieldvalues(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 60u) {
    // optional int32 severity = 4 [default = 0];
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->severity());
    }

    // optional int32 status = 5 [default = 0];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional uint32 repeatcount = 6;
    if (has_repeatcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->repeatcount());
    }

    // optional bool fieldactualchange = 8;
    if (has_fieldactualchange()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorInt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EPICS.VectorInt)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorInt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VectorInt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EPICS.VectorInt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EPICS.VectorInt)
    MergeFrom(*source);
  }
}

void VectorInt::MergeFrom(const VectorInt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EPICS.VectorInt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  val_.MergeFrom(from.val_);
  fieldvalues_.MergeFrom(from.fieldvalues_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      secondsintoyear_ = from.secondsintoyear_;
    }
    if (cached_has_bits & 0x00000002u) {
      nano_ = from.nano_;
    }
    if (cached_has_bits & 0x00000004u) {
      severity_ = from.severity_;
    }
    if (cached_has_bits & 0x00000008u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000010u) {
      repeatcount_ = from.repeatcount_;
    }
    if (cached_has_bits & 0x00000020u) {
      fieldactualchange_ = from.fieldactualchange_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VectorInt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EPICS.VectorInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorInt::CopyFrom(const VectorInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EPICS.VectorInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorInt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->fieldvalues())) return false;
  return true;
}

void VectorInt::Swap(VectorInt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VectorInt::InternalSwap(VectorInt* other) {
  using std::swap;
  val_.InternalSwap(&other->val_);
  CastToBase(&fieldvalues_)->InternalSwap(CastToBase(&other->fieldvalues_));
  swap(secondsintoyear_, other->secondsintoyear_);
  swap(nano_, other->nano_);
  swap(severity_, other->severity_);
  swap(status_, other->status_);
  swap(repeatcount_, other->repeatcount_);
  swap(fieldactualchange_, other->fieldactualchange_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VectorInt::GetMetadata() const {
  protobuf_epics_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_epics_5fevent_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VectorEnum::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VectorEnum::kSecondsintoyearFieldNumber;
const int VectorEnum::kNanoFieldNumber;
const int VectorEnum::kValFieldNumber;
const int VectorEnum::kSeverityFieldNumber;
const int VectorEnum::kStatusFieldNumber;
const int VectorEnum::kRepeatcountFieldNumber;
const int VectorEnum::kFieldvaluesFieldNumber;
const int VectorEnum::kFieldactualchangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VectorEnum::VectorEnum()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_epics_5fevent_2eproto::scc_info_VectorEnum.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:EPICS.VectorEnum)
}
VectorEnum::VectorEnum(const VectorEnum& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      val_(from.val_),
      fieldvalues_(from.fieldvalues_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&secondsintoyear_, &from.secondsintoyear_,
    static_cast<size_t>(reinterpret_cast<char*>(&fieldactualchange_) -
    reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  // @@protoc_insertion_point(copy_constructor:EPICS.VectorEnum)
}

void VectorEnum::SharedCtor() {
  ::memset(&secondsintoyear_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fieldactualchange_) -
      reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
}

VectorEnum::~VectorEnum() {
  // @@protoc_insertion_point(destructor:EPICS.VectorEnum)
  SharedDtor();
}

void VectorEnum::SharedDtor() {
}

void VectorEnum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VectorEnum::descriptor() {
  ::protobuf_epics_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_epics_5fevent_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VectorEnum& VectorEnum::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_epics_5fevent_2eproto::scc_info_VectorEnum.base);
  return *internal_default_instance();
}


void VectorEnum::Clear() {
// @@protoc_insertion_point(message_clear_start:EPICS.VectorEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  val_.Clear();
  fieldvalues_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&secondsintoyear_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fieldactualchange_) -
        reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VectorEnum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EPICS.VectorEnum)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 secondsintoyear = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_secondsintoyear();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondsintoyear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 nano = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_nano();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nano_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint32 val = 3 [packed = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_val())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 26u, input, this->mutable_val())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 severity = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_severity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &severity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 status = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 repeatcount = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_repeatcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repeatcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .EPICS.FieldValue fieldvalues = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_fieldvalues()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fieldactualchange = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_fieldactualchange();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fieldactualchange_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EPICS.VectorEnum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EPICS.VectorEnum)
  return false;
#undef DO_
}

void VectorEnum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EPICS.VectorEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 secondsintoyear = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->secondsintoyear(), output);
  }

  // required uint32 nano = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nano(), output);
  }

  // repeated sint32 val = 3 [packed = true];
  if (this->val_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _val_cached_byte_size_));
  }
  for (int i = 0, n = this->val_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32NoTag(
      this->val(i), output);
  }

  // optional int32 severity = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->severity(), output);
  }

  // optional int32 status = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }

  // optional uint32 repeatcount = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->repeatcount(), output);
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fieldvalues_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->fieldvalues(static_cast<int>(i)),
      output);
  }

  // optional bool fieldactualchange = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->fieldactualchange(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EPICS.VectorEnum)
}

::google::protobuf::uint8* VectorEnum::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:EPICS.VectorEnum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 secondsintoyear = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->secondsintoyear(), target);
  }

  // required uint32 nano = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nano(), target);
  }

  // repeated sint32 val = 3 [packed = true];
  if (this->val_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _val_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32NoTagToArray(this->val_, target);
  }

  // optional int32 severity = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->severity(), target);
  }

  // optional int32 status = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }

  // optional uint32 repeatcount = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->repeatcount(), target);
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fieldvalues_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->fieldvalues(static_cast<int>(i)), deterministic, target);
  }

  // optional bool fieldactualchange = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->fieldactualchange(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EPICS.VectorEnum)
  return target;
}

size_t VectorEnum::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EPICS.VectorEnum)
  size_t total_size = 0;

  if (has_secondsintoyear()) {
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->secondsintoyear());
  }

  if (has_nano()) {
    // required uint32 nano = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nano());
  }

  return total_size;
}
size_t VectorEnum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EPICS.VectorEnum)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->secondsintoyear());

    // required uint32 nano = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nano());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated sint32 val = 3 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt32Size(this->val_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _val_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->fieldvalues_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fieldvalues(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 60u) {
    // optional int32 severity = 4 [default = 0];
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->severity());
    }

    // optional int32 status = 5 [default = 0];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional uint32 repeatcount = 6;
    if (has_repeatcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->repeatcount());
    }

    // optional bool fieldactualchange = 8;
    if (has_fieldactualchange()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorEnum::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EPICS.VectorEnum)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorEnum* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VectorEnum>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EPICS.VectorEnum)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EPICS.VectorEnum)
    MergeFrom(*source);
  }
}

void VectorEnum::MergeFrom(const VectorEnum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EPICS.VectorEnum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  val_.MergeFrom(from.val_);
  fieldvalues_.MergeFrom(from.fieldvalues_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      secondsintoyear_ = from.secondsintoyear_;
    }
    if (cached_has_bits & 0x00000002u) {
      nano_ = from.nano_;
    }
    if (cached_has_bits & 0x00000004u) {
      severity_ = from.severity_;
    }
    if (cached_has_bits & 0x00000008u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000010u) {
      repeatcount_ = from.repeatcount_;
    }
    if (cached_has_bits & 0x00000020u) {
      fieldactualchange_ = from.fieldactualchange_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VectorEnum::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EPICS.VectorEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorEnum::CopyFrom(const VectorEnum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EPICS.VectorEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorEnum::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->fieldvalues())) return false;
  return true;
}

void VectorEnum::Swap(VectorEnum* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VectorEnum::InternalSwap(VectorEnum* other) {
  using std::swap;
  val_.InternalSwap(&other->val_);
  CastToBase(&fieldvalues_)->InternalSwap(CastToBase(&other->fieldvalues_));
  swap(secondsintoyear_, other->secondsintoyear_);
  swap(nano_, other->nano_);
  swap(severity_, other->severity_);
  swap(status_, other->status_);
  swap(repeatcount_, other->repeatcount_);
  swap(fieldactualchange_, other->fieldactualchange_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VectorEnum::GetMetadata() const {
  protobuf_epics_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_epics_5fevent_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VectorFloat::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VectorFloat::kSecondsintoyearFieldNumber;
const int VectorFloat::kNanoFieldNumber;
const int VectorFloat::kValFieldNumber;
const int VectorFloat::kSeverityFieldNumber;
const int VectorFloat::kStatusFieldNumber;
const int VectorFloat::kRepeatcountFieldNumber;
const int VectorFloat::kFieldvaluesFieldNumber;
const int VectorFloat::kFieldactualchangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VectorFloat::VectorFloat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_epics_5fevent_2eproto::scc_info_VectorFloat.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:EPICS.VectorFloat)
}
VectorFloat::VectorFloat(const VectorFloat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      val_(from.val_),
      fieldvalues_(from.fieldvalues_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&secondsintoyear_, &from.secondsintoyear_,
    static_cast<size_t>(reinterpret_cast<char*>(&fieldactualchange_) -
    reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  // @@protoc_insertion_point(copy_constructor:EPICS.VectorFloat)
}

void VectorFloat::SharedCtor() {
  ::memset(&secondsintoyear_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fieldactualchange_) -
      reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
}

VectorFloat::~VectorFloat() {
  // @@protoc_insertion_point(destructor:EPICS.VectorFloat)
  SharedDtor();
}

void VectorFloat::SharedDtor() {
}

void VectorFloat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VectorFloat::descriptor() {
  ::protobuf_epics_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_epics_5fevent_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VectorFloat& VectorFloat::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_epics_5fevent_2eproto::scc_info_VectorFloat.base);
  return *internal_default_instance();
}


void VectorFloat::Clear() {
// @@protoc_insertion_point(message_clear_start:EPICS.VectorFloat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  val_.Clear();
  fieldvalues_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&secondsintoyear_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fieldactualchange_) -
        reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VectorFloat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EPICS.VectorFloat)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 secondsintoyear = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_secondsintoyear();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondsintoyear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 nano = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_nano();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nano_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float val = 3 [packed = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_val())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_val())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 severity = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_severity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &severity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 status = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 repeatcount = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_repeatcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repeatcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .EPICS.FieldValue fieldvalues = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_fieldvalues()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fieldactualchange = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_fieldactualchange();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fieldactualchange_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EPICS.VectorFloat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EPICS.VectorFloat)
  return false;
#undef DO_
}

void VectorFloat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EPICS.VectorFloat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 secondsintoyear = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->secondsintoyear(), output);
  }

  // required uint32 nano = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nano(), output);
  }

  // repeated float val = 3 [packed = true];
  if (this->val_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _val_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->val().data(), this->val_size(), output);
  }

  // optional int32 severity = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->severity(), output);
  }

  // optional int32 status = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }

  // optional uint32 repeatcount = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->repeatcount(), output);
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fieldvalues_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->fieldvalues(static_cast<int>(i)),
      output);
  }

  // optional bool fieldactualchange = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->fieldactualchange(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EPICS.VectorFloat)
}

::google::protobuf::uint8* VectorFloat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:EPICS.VectorFloat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 secondsintoyear = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->secondsintoyear(), target);
  }

  // required uint32 nano = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nano(), target);
  }

  // repeated float val = 3 [packed = true];
  if (this->val_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _val_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->val_, target);
  }

  // optional int32 severity = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->severity(), target);
  }

  // optional int32 status = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }

  // optional uint32 repeatcount = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->repeatcount(), target);
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fieldvalues_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->fieldvalues(static_cast<int>(i)), deterministic, target);
  }

  // optional bool fieldactualchange = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->fieldactualchange(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EPICS.VectorFloat)
  return target;
}

size_t VectorFloat::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EPICS.VectorFloat)
  size_t total_size = 0;

  if (has_secondsintoyear()) {
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->secondsintoyear());
  }

  if (has_nano()) {
    // required uint32 nano = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nano());
  }

  return total_size;
}
size_t VectorFloat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EPICS.VectorFloat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->secondsintoyear());

    // required uint32 nano = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nano());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated float val = 3 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->val_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _val_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->fieldvalues_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fieldvalues(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 60u) {
    // optional int32 severity = 4 [default = 0];
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->severity());
    }

    // optional int32 status = 5 [default = 0];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional uint32 repeatcount = 6;
    if (has_repeatcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->repeatcount());
    }

    // optional bool fieldactualchange = 8;
    if (has_fieldactualchange()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorFloat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EPICS.VectorFloat)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorFloat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VectorFloat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EPICS.VectorFloat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EPICS.VectorFloat)
    MergeFrom(*source);
  }
}

void VectorFloat::MergeFrom(const VectorFloat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EPICS.VectorFloat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  val_.MergeFrom(from.val_);
  fieldvalues_.MergeFrom(from.fieldvalues_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      secondsintoyear_ = from.secondsintoyear_;
    }
    if (cached_has_bits & 0x00000002u) {
      nano_ = from.nano_;
    }
    if (cached_has_bits & 0x00000004u) {
      severity_ = from.severity_;
    }
    if (cached_has_bits & 0x00000008u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000010u) {
      repeatcount_ = from.repeatcount_;
    }
    if (cached_has_bits & 0x00000020u) {
      fieldactualchange_ = from.fieldactualchange_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VectorFloat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EPICS.VectorFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorFloat::CopyFrom(const VectorFloat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EPICS.VectorFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorFloat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->fieldvalues())) return false;
  return true;
}

void VectorFloat::Swap(VectorFloat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VectorFloat::InternalSwap(VectorFloat* other) {
  using std::swap;
  val_.InternalSwap(&other->val_);
  CastToBase(&fieldvalues_)->InternalSwap(CastToBase(&other->fieldvalues_));
  swap(secondsintoyear_, other->secondsintoyear_);
  swap(nano_, other->nano_);
  swap(severity_, other->severity_);
  swap(status_, other->status_);
  swap(repeatcount_, other->repeatcount_);
  swap(fieldactualchange_, other->fieldactualchange_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VectorFloat::GetMetadata() const {
  protobuf_epics_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_epics_5fevent_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VectorDouble::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VectorDouble::kSecondsintoyearFieldNumber;
const int VectorDouble::kNanoFieldNumber;
const int VectorDouble::kValFieldNumber;
const int VectorDouble::kSeverityFieldNumber;
const int VectorDouble::kStatusFieldNumber;
const int VectorDouble::kRepeatcountFieldNumber;
const int VectorDouble::kFieldvaluesFieldNumber;
const int VectorDouble::kFieldactualchangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VectorDouble::VectorDouble()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_epics_5fevent_2eproto::scc_info_VectorDouble.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:EPICS.VectorDouble)
}
VectorDouble::VectorDouble(const VectorDouble& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      val_(from.val_),
      fieldvalues_(from.fieldvalues_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&secondsintoyear_, &from.secondsintoyear_,
    static_cast<size_t>(reinterpret_cast<char*>(&fieldactualchange_) -
    reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  // @@protoc_insertion_point(copy_constructor:EPICS.VectorDouble)
}

void VectorDouble::SharedCtor() {
  ::memset(&secondsintoyear_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fieldactualchange_) -
      reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
}

VectorDouble::~VectorDouble() {
  // @@protoc_insertion_point(destructor:EPICS.VectorDouble)
  SharedDtor();
}

void VectorDouble::SharedDtor() {
}

void VectorDouble::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VectorDouble::descriptor() {
  ::protobuf_epics_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_epics_5fevent_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VectorDouble& VectorDouble::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_epics_5fevent_2eproto::scc_info_VectorDouble.base);
  return *internal_default_instance();
}


void VectorDouble::Clear() {
// @@protoc_insertion_point(message_clear_start:EPICS.VectorDouble)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  val_.Clear();
  fieldvalues_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&secondsintoyear_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fieldactualchange_) -
        reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VectorDouble::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EPICS.VectorDouble)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 secondsintoyear = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_secondsintoyear();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondsintoyear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 nano = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_nano();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nano_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double val = 3 [packed = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_val())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26u, input, this->mutable_val())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 severity = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_severity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &severity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 status = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 repeatcount = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_repeatcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repeatcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .EPICS.FieldValue fieldvalues = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_fieldvalues()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fieldactualchange = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_fieldactualchange();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fieldactualchange_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EPICS.VectorDouble)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EPICS.VectorDouble)
  return false;
#undef DO_
}

void VectorDouble::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EPICS.VectorDouble)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 secondsintoyear = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->secondsintoyear(), output);
  }

  // required uint32 nano = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nano(), output);
  }

  // repeated double val = 3 [packed = true];
  if (this->val_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _val_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->val().data(), this->val_size(), output);
  }

  // optional int32 severity = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->severity(), output);
  }

  // optional int32 status = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }

  // optional uint32 repeatcount = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->repeatcount(), output);
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fieldvalues_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->fieldvalues(static_cast<int>(i)),
      output);
  }

  // optional bool fieldactualchange = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->fieldactualchange(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EPICS.VectorDouble)
}

::google::protobuf::uint8* VectorDouble::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:EPICS.VectorDouble)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 secondsintoyear = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->secondsintoyear(), target);
  }

  // required uint32 nano = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nano(), target);
  }

  // repeated double val = 3 [packed = true];
  if (this->val_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _val_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->val_, target);
  }

  // optional int32 severity = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->severity(), target);
  }

  // optional int32 status = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }

  // optional uint32 repeatcount = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->repeatcount(), target);
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fieldvalues_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->fieldvalues(static_cast<int>(i)), deterministic, target);
  }

  // optional bool fieldactualchange = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->fieldactualchange(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EPICS.VectorDouble)
  return target;
}

size_t VectorDouble::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EPICS.VectorDouble)
  size_t total_size = 0;

  if (has_secondsintoyear()) {
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->secondsintoyear());
  }

  if (has_nano()) {
    // required uint32 nano = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nano());
  }

  return total_size;
}
size_t VectorDouble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EPICS.VectorDouble)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->secondsintoyear());

    // required uint32 nano = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nano());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated double val = 3 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->val_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _val_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->fieldvalues_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fieldvalues(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 60u) {
    // optional int32 severity = 4 [default = 0];
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->severity());
    }

    // optional int32 status = 5 [default = 0];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional uint32 repeatcount = 6;
    if (has_repeatcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->repeatcount());
    }

    // optional bool fieldactualchange = 8;
    if (has_fieldactualchange()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorDouble::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EPICS.VectorDouble)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorDouble* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VectorDouble>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EPICS.VectorDouble)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EPICS.VectorDouble)
    MergeFrom(*source);
  }
}

void VectorDouble::MergeFrom(const VectorDouble& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EPICS.VectorDouble)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  val_.MergeFrom(from.val_);
  fieldvalues_.MergeFrom(from.fieldvalues_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      secondsintoyear_ = from.secondsintoyear_;
    }
    if (cached_has_bits & 0x00000002u) {
      nano_ = from.nano_;
    }
    if (cached_has_bits & 0x00000004u) {
      severity_ = from.severity_;
    }
    if (cached_has_bits & 0x00000008u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000010u) {
      repeatcount_ = from.repeatcount_;
    }
    if (cached_has_bits & 0x00000020u) {
      fieldactualchange_ = from.fieldactualchange_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VectorDouble::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EPICS.VectorDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorDouble::CopyFrom(const VectorDouble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EPICS.VectorDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorDouble::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->fieldvalues())) return false;
  return true;
}

void VectorDouble::Swap(VectorDouble* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VectorDouble::InternalSwap(VectorDouble* other) {
  using std::swap;
  val_.InternalSwap(&other->val_);
  CastToBase(&fieldvalues_)->InternalSwap(CastToBase(&other->fieldvalues_));
  swap(secondsintoyear_, other->secondsintoyear_);
  swap(nano_, other->nano_);
  swap(severity_, other->severity_);
  swap(status_, other->status_);
  swap(repeatcount_, other->repeatcount_);
  swap(fieldactualchange_, other->fieldactualchange_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VectorDouble::GetMetadata() const {
  protobuf_epics_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_epics_5fevent_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void V4GenericBytes::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int V4GenericBytes::kSecondsintoyearFieldNumber;
const int V4GenericBytes::kNanoFieldNumber;
const int V4GenericBytes::kValFieldNumber;
const int V4GenericBytes::kSeverityFieldNumber;
const int V4GenericBytes::kStatusFieldNumber;
const int V4GenericBytes::kRepeatcountFieldNumber;
const int V4GenericBytes::kFieldvaluesFieldNumber;
const int V4GenericBytes::kFieldactualchangeFieldNumber;
const int V4GenericBytes::kUserTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

V4GenericBytes::V4GenericBytes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_epics_5fevent_2eproto::scc_info_V4GenericBytes.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:EPICS.V4GenericBytes)
}
V4GenericBytes::V4GenericBytes(const V4GenericBytes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      fieldvalues_(from.fieldvalues_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  val_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_val()) {
    val_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.val_);
  }
  ::memcpy(&secondsintoyear_, &from.secondsintoyear_,
    static_cast<size_t>(reinterpret_cast<char*>(&usertag_) -
    reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(usertag_));
  // @@protoc_insertion_point(copy_constructor:EPICS.V4GenericBytes)
}

void V4GenericBytes::SharedCtor() {
  val_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&secondsintoyear_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usertag_) -
      reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(usertag_));
}

V4GenericBytes::~V4GenericBytes() {
  // @@protoc_insertion_point(destructor:EPICS.V4GenericBytes)
  SharedDtor();
}

void V4GenericBytes::SharedDtor() {
  val_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void V4GenericBytes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* V4GenericBytes::descriptor() {
  ::protobuf_epics_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_epics_5fevent_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const V4GenericBytes& V4GenericBytes::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_epics_5fevent_2eproto::scc_info_V4GenericBytes.base);
  return *internal_default_instance();
}


void V4GenericBytes::Clear() {
// @@protoc_insertion_point(message_clear_start:EPICS.V4GenericBytes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fieldvalues_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    val_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 254u) {
    ::memset(&secondsintoyear_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&usertag_) -
        reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(usertag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool V4GenericBytes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EPICS.V4GenericBytes)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 secondsintoyear = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_secondsintoyear();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondsintoyear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 nano = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_nano();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nano_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes val = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_val()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 severity = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_severity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &severity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 status = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 repeatcount = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_repeatcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repeatcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .EPICS.FieldValue fieldvalues = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_fieldvalues()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fieldactualchange = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_fieldactualchange();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fieldactualchange_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 userTag = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_usertag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usertag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EPICS.V4GenericBytes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EPICS.V4GenericBytes)
  return false;
#undef DO_
}

void V4GenericBytes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EPICS.V4GenericBytes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 secondsintoyear = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->secondsintoyear(), output);
  }

  // required uint32 nano = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nano(), output);
  }

  // required bytes val = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->val(), output);
  }

  // optional int32 severity = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->severity(), output);
  }

  // optional int32 status = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }

  // optional uint32 repeatcount = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->repeatcount(), output);
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fieldvalues_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->fieldvalues(static_cast<int>(i)),
      output);
  }

  // optional bool fieldactualchange = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->fieldactualchange(), output);
  }

  // optional uint32 userTag = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->usertag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EPICS.V4GenericBytes)
}

::google::protobuf::uint8* V4GenericBytes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:EPICS.V4GenericBytes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 secondsintoyear = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->secondsintoyear(), target);
  }

  // required uint32 nano = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nano(), target);
  }

  // required bytes val = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->val(), target);
  }

  // optional int32 severity = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->severity(), target);
  }

  // optional int32 status = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }

  // optional uint32 repeatcount = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->repeatcount(), target);
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fieldvalues_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->fieldvalues(static_cast<int>(i)), deterministic, target);
  }

  // optional bool fieldactualchange = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->fieldactualchange(), target);
  }

  // optional uint32 userTag = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->usertag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EPICS.V4GenericBytes)
  return target;
}

size_t V4GenericBytes::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EPICS.V4GenericBytes)
  size_t total_size = 0;

  if (has_val()) {
    // required bytes val = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->val());
  }

  if (has_secondsintoyear()) {
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->secondsintoyear());
  }

  if (has_nano()) {
    // required uint32 nano = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nano());
  }

  return total_size;
}
size_t V4GenericBytes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EPICS.V4GenericBytes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes val = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->val());

    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->secondsintoyear());

    // required uint32 nano = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nano());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .EPICS.FieldValue fieldvalues = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->fieldvalues_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fieldvalues(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 248u) {
    // optional int32 severity = 4 [default = 0];
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->severity());
    }

    // optional int32 status = 5 [default = 0];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional uint32 repeatcount = 6;
    if (has_repeatcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->repeatcount());
    }

    // optional bool fieldactualchange = 8;
    if (has_fieldactualchange()) {
      total_size += 1 + 1;
    }

    // optional uint32 userTag = 9;
    if (has_usertag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usertag());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void V4GenericBytes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EPICS.V4GenericBytes)
  GOOGLE_DCHECK_NE(&from, this);
  const V4GenericBytes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const V4GenericBytes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EPICS.V4GenericBytes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EPICS.V4GenericBytes)
    MergeFrom(*source);
  }
}

void V4GenericBytes::MergeFrom(const V4GenericBytes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EPICS.V4GenericBytes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fieldvalues_.MergeFrom(from.fieldvalues_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_val();
      val_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.val_);
    }
    if (cached_has_bits & 0x00000002u) {
      secondsintoyear_ = from.secondsintoyear_;
    }
    if (cached_has_bits & 0x00000004u) {
      nano_ = from.nano_;
    }
    if (cached_has_bits & 0x00000008u) {
      severity_ = from.severity_;
    }
    if (cached_has_bits & 0x00000010u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000020u) {
      repeatcount_ = from.repeatcount_;
    }
    if (cached_has_bits & 0x00000040u) {
      fieldactualchange_ = from.fieldactualchange_;
    }
    if (cached_has_bits & 0x00000080u) {
      usertag_ = from.usertag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void V4GenericBytes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EPICS.V4GenericBytes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void V4GenericBytes::CopyFrom(const V4GenericBytes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EPICS.V4GenericBytes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool V4GenericBytes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->fieldvalues())) return false;
  return true;
}

void V4GenericBytes::Swap(V4GenericBytes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void V4GenericBytes::InternalSwap(V4GenericBytes* other) {
  using std::swap;
  CastToBase(&fieldvalues_)->InternalSwap(CastToBase(&other->fieldvalues_));
  val_.Swap(&other->val_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(secondsintoyear_, other->secondsintoyear_);
  swap(nano_, other->nano_);
  swap(severity_, other->severity_);
  swap(status_, other->status_);
  swap(repeatcount_, other->repeatcount_);
  swap(fieldactualchange_, other->fieldactualchange_);
  swap(usertag_, other->usertag_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata V4GenericBytes::GetMetadata() const {
  protobuf_epics_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_epics_5fevent_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PayloadInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PayloadInfo::kTypeFieldNumber;
const int PayloadInfo::kPvnameFieldNumber;
const int PayloadInfo::kYearFieldNumber;
const int PayloadInfo::kElementCountFieldNumber;
const int PayloadInfo::kUnused00FieldNumber;
const int PayloadInfo::kUnused01FieldNumber;
const int PayloadInfo::kUnused02FieldNumber;
const int PayloadInfo::kUnused03FieldNumber;
const int PayloadInfo::kUnused04FieldNumber;
const int PayloadInfo::kUnused05FieldNumber;
const int PayloadInfo::kUnused06FieldNumber;
const int PayloadInfo::kUnused07FieldNumber;
const int PayloadInfo::kUnused08FieldNumber;
const int PayloadInfo::kUnused09FieldNumber;
const int PayloadInfo::kHeadersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PayloadInfo::PayloadInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_epics_5fevent_2eproto::scc_info_PayloadInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:EPICS.PayloadInfo)
}
PayloadInfo::PayloadInfo(const PayloadInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      headers_(from.headers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pvname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pvname()) {
    pvname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pvname_);
  }
  unused09_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_unused09()) {
    unused09_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unused09_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&elementcount_) -
    reinterpret_cast<char*>(&type_)) + sizeof(elementcount_));
  // @@protoc_insertion_point(copy_constructor:EPICS.PayloadInfo)
}

void PayloadInfo::SharedCtor() {
  pvname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unused09_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&elementcount_) -
      reinterpret_cast<char*>(&type_)) + sizeof(elementcount_));
}

PayloadInfo::~PayloadInfo() {
  // @@protoc_insertion_point(destructor:EPICS.PayloadInfo)
  SharedDtor();
}

void PayloadInfo::SharedDtor() {
  pvname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unused09_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PayloadInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PayloadInfo::descriptor() {
  ::protobuf_epics_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_epics_5fevent_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PayloadInfo& PayloadInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_epics_5fevent_2eproto::scc_info_PayloadInfo.base);
  return *internal_default_instance();
}


void PayloadInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:EPICS.PayloadInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      pvname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      unused09_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unused03_) -
        reinterpret_cast<char*>(&type_)) + sizeof(unused03_));
  }
  if (cached_has_bits & 16128u) {
    ::memset(&unused04_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&elementcount_) -
        reinterpret_cast<char*>(&unused04_)) + sizeof(elementcount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PayloadInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EPICS.PayloadInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .EPICS.PayloadType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EPICS::PayloadType_IsValid(value)) {
            set_type(static_cast< ::EPICS::PayloadType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string pvname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pvname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pvname().data(), static_cast<int>(this->pvname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "EPICS.PayloadInfo.pvname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 year = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_year();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &year_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 elementCount = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_elementcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &elementcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double unused00 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_unused00();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &unused00_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double unused01 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_unused01();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &unused01_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double unused02 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_unused02();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &unused02_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double unused03 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_unused03();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &unused03_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double unused04 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_unused04();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &unused04_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double unused05 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_unused05();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &unused05_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double unused06 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_unused06();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &unused06_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double unused07 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_unused07();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &unused07_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double unused08 = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_unused08();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &unused08_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string unused09 = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unused09()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unused09().data(), static_cast<int>(this->unused09().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "EPICS.PayloadInfo.unused09");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .EPICS.FieldValue headers = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EPICS.PayloadInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EPICS.PayloadInfo)
  return false;
#undef DO_
}

void PayloadInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EPICS.PayloadInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .EPICS.PayloadType type = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required string pvname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pvname().data(), static_cast<int>(this->pvname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "EPICS.PayloadInfo.pvname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pvname(), output);
  }

  // required int32 year = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->year(), output);
  }

  // optional int32 elementCount = 4;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->elementcount(), output);
  }

  // optional double unused00 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->unused00(), output);
  }

  // optional double unused01 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->unused01(), output);
  }

  // optional double unused02 = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->unused02(), output);
  }

  // optional double unused03 = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->unused03(), output);
  }

  // optional double unused04 = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->unused04(), output);
  }

  // optional double unused05 = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->unused05(), output);
  }

  // optional double unused06 = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->unused06(), output);
  }

  // optional double unused07 = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->unused07(), output);
  }

  // optional double unused08 = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->unused08(), output);
  }

  // optional string unused09 = 14;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unused09().data(), static_cast<int>(this->unused09().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "EPICS.PayloadInfo.unused09");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->unused09(), output);
  }

  // repeated .EPICS.FieldValue headers = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->headers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15,
      this->headers(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EPICS.PayloadInfo)
}

::google::protobuf::uint8* PayloadInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:EPICS.PayloadInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .EPICS.PayloadType type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required string pvname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pvname().data(), static_cast<int>(this->pvname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "EPICS.PayloadInfo.pvname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pvname(), target);
  }

  // required int32 year = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->year(), target);
  }

  // optional int32 elementCount = 4;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->elementcount(), target);
  }

  // optional double unused00 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->unused00(), target);
  }

  // optional double unused01 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->unused01(), target);
  }

  // optional double unused02 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->unused02(), target);
  }

  // optional double unused03 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->unused03(), target);
  }

  // optional double unused04 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->unused04(), target);
  }

  // optional double unused05 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->unused05(), target);
  }

  // optional double unused06 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->unused06(), target);
  }

  // optional double unused07 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->unused07(), target);
  }

  // optional double unused08 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->unused08(), target);
  }

  // optional string unused09 = 14;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unused09().data(), static_cast<int>(this->unused09().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "EPICS.PayloadInfo.unused09");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->unused09(), target);
  }

  // repeated .EPICS.FieldValue headers = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->headers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->headers(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EPICS.PayloadInfo)
  return target;
}

size_t PayloadInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EPICS.PayloadInfo)
  size_t total_size = 0;

  if (has_pvname()) {
    // required string pvname = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pvname());
  }

  if (has_type()) {
    // required .EPICS.PayloadType type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (has_year()) {
    // required int32 year = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->year());
  }

  return total_size;
}
size_t PayloadInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EPICS.PayloadInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required string pvname = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pvname());

    // required .EPICS.PayloadType type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

    // required int32 year = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->year());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .EPICS.FieldValue headers = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->headers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->headers(static_cast<int>(i)));
    }
  }

  // optional string unused09 = 14;
  if (has_unused09()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->unused09());
  }

  if (_has_bits_[0 / 32] & 240u) {
    // optional double unused00 = 5;
    if (has_unused00()) {
      total_size += 1 + 8;
    }

    // optional double unused01 = 6;
    if (has_unused01()) {
      total_size += 1 + 8;
    }

    // optional double unused02 = 7;
    if (has_unused02()) {
      total_size += 1 + 8;
    }

    // optional double unused03 = 8;
    if (has_unused03()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional double unused04 = 9;
    if (has_unused04()) {
      total_size += 1 + 8;
    }

    // optional double unused05 = 10;
    if (has_unused05()) {
      total_size += 1 + 8;
    }

    // optional double unused06 = 11;
    if (has_unused06()) {
      total_size += 1 + 8;
    }

    // optional double unused07 = 12;
    if (has_unused07()) {
      total_size += 1 + 8;
    }

    // optional double unused08 = 13;
    if (has_unused08()) {
      total_size += 1 + 8;
    }

    // optional int32 elementCount = 4;
    if (has_elementcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->elementcount());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PayloadInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EPICS.PayloadInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PayloadInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PayloadInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EPICS.PayloadInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EPICS.PayloadInfo)
    MergeFrom(*source);
  }
}

void PayloadInfo::MergeFrom(const PayloadInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EPICS.PayloadInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_pvname();
      pvname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pvname_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_unused09();
      unused09_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unused09_);
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      year_ = from.year_;
    }
    if (cached_has_bits & 0x00000010u) {
      unused00_ = from.unused00_;
    }
    if (cached_has_bits & 0x00000020u) {
      unused01_ = from.unused01_;
    }
    if (cached_has_bits & 0x00000040u) {
      unused02_ = from.unused02_;
    }
    if (cached_has_bits & 0x00000080u) {
      unused03_ = from.unused03_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      unused04_ = from.unused04_;
    }
    if (cached_has_bits & 0x00000200u) {
      unused05_ = from.unused05_;
    }
    if (cached_has_bits & 0x00000400u) {
      unused06_ = from.unused06_;
    }
    if (cached_has_bits & 0x00000800u) {
      unused07_ = from.unused07_;
    }
    if (cached_has_bits & 0x00001000u) {
      unused08_ = from.unused08_;
    }
    if (cached_has_bits & 0x00002000u) {
      elementcount_ = from.elementcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PayloadInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EPICS.PayloadInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PayloadInfo::CopyFrom(const PayloadInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EPICS.PayloadInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayloadInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->headers())) return false;
  return true;
}

void PayloadInfo::Swap(PayloadInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PayloadInfo::InternalSwap(PayloadInfo* other) {
  using std::swap;
  CastToBase(&headers_)->InternalSwap(CastToBase(&other->headers_));
  pvname_.Swap(&other->pvname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  unused09_.Swap(&other->unused09_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(year_, other->year_);
  swap(unused00_, other->unused00_);
  swap(unused01_, other->unused01_);
  swap(unused02_, other->unused02_);
  swap(unused03_, other->unused03_);
  swap(unused04_, other->unused04_);
  swap(unused05_, other->unused05_);
  swap(unused06_, other->unused06_);
  swap(unused07_, other->unused07_);
  swap(unused08_, other->unused08_);
  swap(elementcount_, other->elementcount_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PayloadInfo::GetMetadata() const {
  protobuf_epics_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_epics_5fevent_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace EPICS
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::EPICS::FieldValue* Arena::CreateMaybeMessage< ::EPICS::FieldValue >(Arena* arena) {
  return Arena::CreateInternal< ::EPICS::FieldValue >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::EPICS::ScalarString* Arena::CreateMaybeMessage< ::EPICS::ScalarString >(Arena* arena) {
  return Arena::CreateInternal< ::EPICS::ScalarString >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::EPICS::ScalarByte* Arena::CreateMaybeMessage< ::EPICS::ScalarByte >(Arena* arena) {
  return Arena::CreateInternal< ::EPICS::ScalarByte >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::EPICS::ScalarShort* Arena::CreateMaybeMessage< ::EPICS::ScalarShort >(Arena* arena) {
  return Arena::CreateInternal< ::EPICS::ScalarShort >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::EPICS::ScalarInt* Arena::CreateMaybeMessage< ::EPICS::ScalarInt >(Arena* arena) {
  return Arena::CreateInternal< ::EPICS::ScalarInt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::EPICS::ScalarEnum* Arena::CreateMaybeMessage< ::EPICS::ScalarEnum >(Arena* arena) {
  return Arena::CreateInternal< ::EPICS::ScalarEnum >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::EPICS::ScalarFloat* Arena::CreateMaybeMessage< ::EPICS::ScalarFloat >(Arena* arena) {
  return Arena::CreateInternal< ::EPICS::ScalarFloat >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::EPICS::ScalarDouble* Arena::CreateMaybeMessage< ::EPICS::ScalarDouble >(Arena* arena) {
  return Arena::CreateInternal< ::EPICS::ScalarDouble >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::EPICS::VectorString* Arena::CreateMaybeMessage< ::EPICS::VectorString >(Arena* arena) {
  return Arena::CreateInternal< ::EPICS::VectorString >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::EPICS::VectorChar* Arena::CreateMaybeMessage< ::EPICS::VectorChar >(Arena* arena) {
  return Arena::CreateInternal< ::EPICS::VectorChar >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::EPICS::VectorShort* Arena::CreateMaybeMessage< ::EPICS::VectorShort >(Arena* arena) {
  return Arena::CreateInternal< ::EPICS::VectorShort >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::EPICS::VectorInt* Arena::CreateMaybeMessage< ::EPICS::VectorInt >(Arena* arena) {
  return Arena::CreateInternal< ::EPICS::VectorInt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::EPICS::VectorEnum* Arena::CreateMaybeMessage< ::EPICS::VectorEnum >(Arena* arena) {
  return Arena::CreateInternal< ::EPICS::VectorEnum >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::EPICS::VectorFloat* Arena::CreateMaybeMessage< ::EPICS::VectorFloat >(Arena* arena) {
  return Arena::CreateInternal< ::EPICS::VectorFloat >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::EPICS::VectorDouble* Arena::CreateMaybeMessage< ::EPICS::VectorDouble >(Arena* arena) {
  return Arena::CreateInternal< ::EPICS::VectorDouble >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::EPICS::V4GenericBytes* Arena::CreateMaybeMessage< ::EPICS::V4GenericBytes >(Arena* arena) {
  return Arena::CreateInternal< ::EPICS::V4GenericBytes >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::EPICS::PayloadInfo* Arena::CreateMaybeMessage< ::EPICS::PayloadInfo >(Arena* arena) {
  return Arena::CreateInternal< ::EPICS::PayloadInfo >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
